syntax = "proto3";

package utxorpc.v1alpha.watch;

import "google/protobuf/field_mask.proto";
import "utxorpc/v1alpha/cardano/cardano.proto";

// Represents a reference to a specific block by a chosen combination of fields
message BlockRef {
  uint64 slot = 1; // Height or slot number (depending on the blockchain)
  bytes hash = 2; // Hash of the content of the block
  uint64 height = 3; // Block height
}

message AnyChainBlock {
  bytes native_bytes = 1; // Original bytes as defined by the chain
  oneof chain {
    utxorpc.v1alpha.cardano.Block cardano = 2; // A parsed Cardano block.
  }
}

// Represents a tx pattern from any supported blockchain.
message AnyChainTxPattern {
  oneof chain {
    utxorpc.v1alpha.cardano.TxPattern cardano = 1; // A Cardano tx pattern.
  }
}

// Represents a simple tx predicate that can composed to create more complex ones
message TxPredicate {
  AnyChainTxPattern match = 1; // Predicate is true if tx exhibits pattern.
  repeated TxPredicate not = 2; // Predicate is true if tx doesn't exhibit pattern.
  repeated TxPredicate all_of = 3; // Predicate is true if tx exhibits all of the patterns.
  repeated TxPredicate any_of = 4; // Predicate is true if tx exhibits any of the patterns.
}

// Request to watch transactions from the chain based on a set of predicates.
message WatchTxRequest {
  TxPredicate predicate = 1; // Predicate to filter transactions by.
  google.protobuf.FieldMask field_mask = 2; // Field mask to selectively return fields.
  repeated BlockRef intersect = 3; // List of block references to find the intersection.
}

// Represents a transaction from any supported blockchain.
message AnyChainTx {
  oneof chain {
    utxorpc.v1alpha.cardano.Tx cardano = 1; // A Cardano transaction.
  }
  AnyChainBlock block = 2; // Block containing the transaction
}

// Response containing the matching chain transactions.
message WatchTxResponse {
  oneof action {
    AnyChainTx apply = 1; // Apply this transaction.
    AnyChainTx undo = 2; // Undo this transaction.
  }
}

// Service definition for watching transactions based on predicates.
service WatchService {
  rpc WatchTx(WatchTxRequest) returns (stream WatchTxResponse); // Stream transactions from the chain matching the specified predicates.
}
