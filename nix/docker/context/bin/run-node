#!/bin/bash

scriptDir=$(dirname $0)
source $scriptDir/functions

echo "Running the cardano node ..."

# Shift the first option by one index
shift

# Define a few defaults
CARDANO_CONFIG_BASE="/opt/cardano/config"

if [[ -z $CARDANO_CONFIG ]]; then
  CARDANO_CONFIG="$CARDANO_CONFIG_BASE/mainnet-config.json"
fi

if [[ -z $CARDANO_TOPOLOGY ]]; then
  CARDANO_TOPOLOGY="$CARDANO_CONFIG_BASE/mainnet-topology.json"
fi

if [[ -z $CARDANO_DATABASE_PATH ]]; then
  CARDANO_DATABASE_PATH="/opt/cardano/data"
fi

if [[ -z $CARDANO_SOCKET_PATH ]]; then
  CARDANO_SOCKET_PATH="/opt/cardano/ipc/socket"
fi

if [[ -z $CARDANO_LOG_DIR ]]; then
  CARDANO_LOG_DIR="/opt/cardano/logs"
fi

if [[ -z $CARDANO_BIND_ADDR ]]; then
  CARDANO_BIND_ADDR="0.0.0.0"
fi

if [[ -z $CARDANO_PORT ]]; then
  CARDANO_PORT=3001
fi

if [[ -z $CARDANO_BLOCK_PRODUCER ]]; then
  CARDANO_BLOCK_PRODUCER=false
fi

if [[ -z $CARDANO_UPDATE_TOPOLOGY ]]; then
  CARDANO_UPDATE_TOPOLOGY=false
fi

if [[ -z $EKG_HOST ]]; then
  EKG_HOST="127.0.0.1"
fi

if [[ -z $EKG_PORT ]]; then
  EKG_PORT=12788
fi

if [[ -z $EKG_TIMEOUT ]]; then
  EKG_TIMEOUT=3
fi

if [[ -z $MAX_PEERS ]]; then
  MAX_PEERS=15
fi

# Process CARDANO_CONFIG as JSON value
isJsonValue "$CARDANO_CONFIG"
if [[ $return = true ]]; then
  TARGET_FILE="/var/cardano/config/mainnet-config.json"
  echo "Generating $TARGET_FILE ..."
  mkdir -p `dirname $TARGET_FILE` \
    && echo $CARDANO_CONFIG > $TARGET_FILE \
    && CARDANO_CONFIG=$TARGET_FILE
fi

# Process CARDANO_TOPOLOGY as JSON value
isJsonValue "$CARDANO_TOPOLOGY"
if [[ $return = true ]]; then
  TARGET_FILE="/var/cardano/config/mainnet-topology.json"
  echo "Generating $TARGET_FILE ..."
  mkdir -p `dirname $TARGET_FILE` \
    && echo $CARDANO_TOPOLOGY > $TARGET_FILE \
    && CARDANO_TOPOLOGY=$TARGET_FILE
fi

#####################################################################
#
# Print run environment
#
printRunEnv () {

  echo "CARDANO_CONFIG=$CARDANO_CONFIG"
  echo "CARDANO_TOPOLOGY=$CARDANO_TOPOLOGY"
  echo "CARDANO_BIND_ADDR=$CARDANO_BIND_ADDR"
  echo "CARDANO_PORT=$CARDANO_PORT"
  echo "CARDANO_DATABASE_PATH=$CARDANO_DATABASE_PATH"
  echo "CARDANO_SOCKET_PATH=$CARDANO_SOCKET_PATH"
  echo "CARDANO_LOG_DIR=$CARDANO_LOG_DIR"
  echo "CARDANO_PUBLIC_IP=$CARDANO_PUBLIC_IP"
  echo "CARDANO_CUSTOM_PEERS=$CARDANO_CUSTOM_PEERS"
  echo "CARDANO_UPDATE_TOPOLOGY=$CARDANO_UPDATE_TOPOLOGY"
  echo "CARDANO_BLOCK_PRODUCER=$CARDANO_BLOCK_PRODUCER"

  if [ "$CARDANO_BLOCK_PRODUCER" = true ]; then

    if [ -z $CARDANO_SHELLEY_KES_KEY ]; then
      CARDANO_SHELLEY_KES_KEY="/var/cardano/config/keys/kes.skey"
    fi

    if [ -z $CARDANO_SHELLEY_VRF_KEY ]; then
      CARDANO_SHELLEY_VRF_KEY="/var/cardano/config/keys/vrf.skey"
    fi

    if [ -z $CARDANO_SHELLEY_OPERATIONAL_CERTIFICATE ]; then
      CARDANO_SHELLEY_OPERATIONAL_CERTIFICATE="/var/cardano/config/keys/node.cert"
    fi

    # Kubernetes maps sectrets to a read-only file system with public access
    # VRF private key file at: /var/cardano/config/keys/vrf.skey has "other" file permissions.

    copySecretFile() {
      SOURCE_FILE=$1; TARGET_FILE=$2
      if [[ ! -f $TARGET_FILE && -f $SOURCE_FILE ]]; then
        mkdir -p `dirname $TARGET_FILE`
        cp $SOURCE_FILE $TARGET_FILE
      fi
      chmod 600 $TARGET_FILE
    }

    copySecretFile /var/cardano/secret/keys/kes.skey $CARDANO_SHELLEY_KES_KEY
    copySecretFile /var/cardano/secret/keys/vrf.skey $CARDANO_SHELLEY_VRF_KEY
    copySecretFile /var/cardano/secret/keys/node.cert $CARDANO_SHELLEY_OPERATIONAL_CERTIFICATE

    echo "CARDANO_SHELLEY_KES_KEY=$CARDANO_SHELLEY_KES_KEY"
    echo "CARDANO_SHELLEY_VRF_KEY=$CARDANO_SHELLEY_VRF_KEY"
    echo "CARDANO_SHELLEY_OPERATIONAL_CERTIFICATE=$CARDANO_SHELLEY_OPERATIONAL_CERTIFICATE"
  fi
}

#####################################################################
#
# Write root env file
#
writeRootEnv () {

cat << EOF > /usr/local/bin/env
#!/usr/bin/env bash

# Docker run ENV vars
CARDANO_CONFIG="$CARDANO_CONFIG"
CARDANO_TOPOLOGY="$CARDANO_TOPOLOGY"
CARDANO_BIND_ADDR="$CARDANO_BIND_ADDR"
CARDANO_PORT=$CARDANO_PORT
CARDANO_DATABASE_PATH="$CARDANO_DATABASE_PATH"
CARDANO_SOCKET_PATH="$CARDANO_SOCKET_PATH"
CARDANO_LOG_DIR="$CARDANO_LOG_DIR"
CARDANO_PUBLIC_IP="$CARDANO_PUBLIC_IP"
CARDANO_CUSTOM_PEERS="$CARDANO_CUSTOM_PEERS"
CARDANO_UPDATE_TOPOLOGY=$CARDANO_UPDATE_TOPOLOGY
CARDANO_BLOCK_PRODUCER=$CARDANO_BLOCK_PRODUCER

# Mapping for topologyUpdater
CNODE_HOSTNAME="$CARDANO_PUBLIC_IP"
CNODE_PORT=$CARDANO_PORT
CUSTOM_PEERS="$CARDANO_CUSTOM_PEERS"
GENESIS_JSON="$CARDANO_CONFIG_BASE/mainnet-shelley-genesis.json"
TOPOLOGY="$CARDANO_TOPOLOGY"
LOG_DIR="$CARDANO_LOG_DIR"
EKG_HOST="$EKG_HOST"
EKG_PORT=$EKG_PORT
EKG_TIMEOUT=$EKG_TIMEOUT
MAX_PEERS=$MAX_PEERS

# Mapping for gLiveView
CCLI="cardano-cli"
CNODE_PORT=$CARDANO_PORT
CONFIG="$CARDANO_CONFIG"
TOPOLOGY="$CARDANO_TOPOLOGY"
SOCKET="$CARDANO_SOCKET_PATH"
LOG_DIR="$CARDANO_LOG_DIR"
EOF
}

#####################################################################
#
# Run the relay node in the background
#
runRelayNode () {

  effopts=(--config $CARDANO_CONFIG \
    --topology $CARDANO_TOPOLOGY \
    --database-path $CARDANO_DATABASE_PATH \
    --socket-path $CARDANO_SOCKET_PATH \
    --host-addr $CARDANO_BIND_ADDR \
    --port $CARDANO_PORT)

  effopts+=(${options[@]})

  echo "cardano-node run ${effopts[@]}"
  cardano-node run ${effopts[@]} &
}

#####################################################################
#
# Run the block producer in the background
#
runBlockProducerNode () {

  effopts=(--config $CARDANO_CONFIG \
    --topology $CARDANO_TOPOLOGY \
    --database-path $CARDANO_DATABASE_PATH \
    --socket-path $CARDANO_SOCKET_PATH \
    --host-addr $CARDANO_BIND_ADDR \
    --port $CARDANO_PORT \
    --shelley-kes-key $CARDANO_SHELLEY_KES_KEY \
    --shelley-vrf-key $CARDANO_SHELLEY_VRF_KEY \
    --shelley-operational-certificate $CARDANO_SHELLEY_OPERATIONAL_CERTIFICATE)

  effopts+=(${options[@]})

  echo "cardano-node run ${effopts[@]}"
  cardano-node run ${effopts[@]} &
}

# Override default values with explicit options
options=($@)
for i in "${!options[@]}"
do
    j=$((i + 1))
    key=${options[i]}
    val=${options[j]}
    found=false

    # echo "$i/$j: ${key} ${val}"

    case ${key} in
      --config) CARDANO_CONFIG=${val}; found=true;;
      --topology) CARDANO_TOPOLOGY=${val}; found=true;;
      --database-path) CARDANO_DATABASE_PATH=${val}; found=true;;
      --socket-path) CARDANO_SOCKET_PATH=${val}; found=true;;
      --host-addr) CARDANO_BIND_ADDR=${val}; found=true;;
      --port) CARDANO_PORT=${val}; found=true;;
      --shelley-kes-key) CARDANO_SHELLEY_KES_KEY=${val}; found=true;;
      --shelley-vrf-key) CARDANO_SHELLEY_VRF_KEY=${val}; found=true;;
      --shelley-operational-certificate) CARDANO_SHELLEY_OPERATIONAL_CERTIFICATE=${val}; found=true;;
    esac

    if [[ $found == true ]]; then
      options[i]="";
      options[j]="";
    fi
done

printRunEnv
writeRootEnv

# The IPC socket dir is not created on demand
mkdir -p `dirname $CARDANO_SOCKET_PATH`

# Removing a potentialy existing lost+found directory
rm -rf $CARDANO_DATABASE_PATH/lost+found

if [[ $CARDANO_BLOCK_PRODUCER == true ]]; then

  runBlockProducerNode

else

  if [[ $CARDANO_UPDATE_TOPOLOGY == true ]]; then
    topologyUpdate -l &
  fi

  runRelayNode
fi

trapSIGTERM
