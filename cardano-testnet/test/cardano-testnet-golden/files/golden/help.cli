Usage: cardano-cli (Era based commands | byron | ping | version)

Usage: cardano-cli text-view decode-cbor

  Commands for dealing with Shelley TextView files. Transactions, addresses etc
  are stored on disk as TextView files.

Usage: cardano-cli text-view decode-cbor --in-file FILE [--out-file FILE]

  Print a TextView file as decoded CBOR.

Usage: cardano-cli governance 
            ( create-mir-certificate
            | create-genesis-key-delegation-certificate
            | create-update-proposal
            | create-poll
            | answer-poll
            | verify-poll
            )

  Governance commands

Usage: cardano-cli governance create-mir-certificate 
            ( (--reserves | --treasury)
              (--stake-address ADDRESS)
              (--reward LOVELACE)
              --out-file FILE
            | stake-addresses
            | transfer-to-treasury
            | transfer-to-rewards
            )

  Create an MIR (Move Instantaneous Rewards) certificate

Usage: cardano-cli governance create-mir-certificate stake-addresses 
            (--reserves | --treasury)
            (--stake-address ADDRESS)
            (--reward LOVELACE)
            --out-file FILE

  Create an MIR certificate to pay stake addresses

Usage: cardano-cli governance create-mir-certificate transfer-to-treasury --transfer LOVELACE
            --out-file FILE

  Create an MIR certificate to transfer from the reserves pot to the treasury
  pot

Usage: cardano-cli governance create-mir-certificate transfer-to-rewards --transfer LOVELACE
            --out-file FILE

  Create an MIR certificate to transfer from the treasury pot to the reserves
  pot

Usage: cardano-cli governance create-genesis-key-delegation-certificate 
            ( --genesis-verification-key STRING
            | --genesis-verification-key-file FILE
            | --genesis-verification-key-hash STRING
            )
            ( --genesis-delegate-verification-key STRING
            | --genesis-delegate-verification-key-file FILE
            | --genesis-delegate-verification-key-hash STRING
            )
            ( --vrf-verification-key STRING
            | --vrf-verification-key-file FILE
            | --vrf-verification-key-hash STRING
            )
            --out-file FILE

  Create a genesis key delegation certificate

Usage: cardano-cli governance create-update-proposal --out-file FILE
            --epoch EPOCH
            (--genesis-verification-key-file FILE)
            [--protocol-major-version NATURAL --protocol-minor-version NATURAL]
            [--decentralization-parameter RATIONAL]
            [--extra-entropy HEX | --reset-extra-entropy]
            [--max-block-header-size NATURAL]
            [--max-block-body-size NATURAL]
            [--max-tx-size NATURAL]
            [--min-fee-constant LOVELACE]
            [--min-fee-linear LOVELACE]
            [--min-utxo-value NATURAL]
            [--key-reg-deposit-amt NATURAL]
            [--pool-reg-deposit NATURAL]
            [--min-pool-cost NATURAL]
            [--pool-retirement-epoch-boundary EPOCH_BOUNDARY]
            [--number-of-pools NATURAL]
            [--pool-influence RATIONAL]
            [--monetary-expansion RATIONAL]
            [--treasury-expansion RATIONAL]
            [--utxo-cost-per-word LOVELACE]
            [--price-execution-steps RATIONAL --price-execution-memory RATIONAL]
            [--max-tx-execution-units (INT, INT)]
            [--max-block-execution-units (INT, INT)]
            [--max-value-size INT]
            [--collateral-percent INT]
            [--max-collateral-inputs INT]
            [--utxo-cost-per-byte LOVELACE]
            [--cost-model-file FILE]

  Create an update proposal

Usage: cardano-cli governance create-poll --question STRING
            (--answer STRING)
            [--nonce UINT]
            --out-file FILE

  Create an SPO poll

Usage: cardano-cli governance answer-poll --poll-file FILE
            [--answer INT]
            [--out-file FILE]

  Answer an SPO poll

Usage: cardano-cli governance verify-poll --poll-file FILE
            --tx-file FILE
            [--out-file FILE]

  Verify an answer to a given SPO poll

Usage: cardano-cli genesis 
            ( key-gen-genesis
            | key-gen-delegate
            | key-gen-utxo
            | key-hash
            | get-ver-key
            | initial-addr
            | initial-txin
            | create-cardano
            | create
            | create-staked
            | hash
            )

  Genesis block commands

Usage: cardano-cli genesis key-gen-genesis --verification-key-file FILE
            --signing-key-file FILE

  Create a Shelley genesis key pair

Usage: cardano-cli genesis key-gen-delegate --verification-key-file FILE
            --signing-key-file FILE
            --operational-certificate-issue-counter-file FILE

  Create a Shelley genesis delegate key pair

Usage: cardano-cli genesis key-gen-utxo --verification-key-file FILE
            --signing-key-file FILE

  Create a Shelley genesis UTxO key pair

Usage: cardano-cli genesis key-hash --verification-key-file FILE

  Print the identifier (hash) of a public key

Usage: cardano-cli genesis get-ver-key --verification-key-file FILE
            --signing-key-file FILE

  Derive the verification key from a signing key

Usage: cardano-cli genesis initial-addr --verification-key-file FILE
            (--mainnet | --testnet-magic NATURAL)
            [--out-file FILE]

  Get the address for an initial UTxO based on the verification key

Usage: cardano-cli genesis initial-txin --verification-key-file FILE
            (--mainnet | --testnet-magic NATURAL)
            [--out-file FILE]

  Get the TxIn for an initial UTxO based on the verification key

Usage: cardano-cli genesis create-cardano --genesis-dir DIR
            [--gen-genesis-keys INT]
            [--gen-utxo-keys INT]
            [--start-time UTC-TIME]
            [--supply LOVELACE]
            [--security-param INT]
            [--slot-length INT]
            [--slot-coefficient RATIONAL]
            (--mainnet | --testnet-magic NATURAL)
            --byron-template FILEPATH
            --shelley-template FILEPATH
            --alonzo-template FILEPATH
            --conway-template FILEPATH
            [--node-config-template FILEPATH]

  Create a Byron and Shelley genesis file from a genesis template and
  genesis/delegation/spending keys.

Usage: cardano-cli genesis create [--key-output-format STRING]
            --genesis-dir DIR
            [--gen-genesis-keys INT]
            [--gen-utxo-keys INT]
            [--start-time UTC-TIME]
            [--supply LOVELACE]
            (--mainnet | --testnet-magic NATURAL)

  Create a Shelley genesis file from a genesis template and
  genesis/delegation/spending keys.

Usage: cardano-cli genesis create-staked [--key-output-format STRING]
            --genesis-dir DIR
            [--gen-genesis-keys INT]
            [--gen-utxo-keys INT]
            [--gen-pools INT]
            [--gen-stake-delegs INT]
            [--start-time UTC-TIME]
            [--supply LOVELACE]
            [--supply-delegated LOVELACE]
            (--mainnet | --testnet-magic NATURAL)
            [--bulk-pool-cred-files INT]
            [--bulk-pools-per-file INT]
            [--num-stuffed-utxo INT]
            [--relay-specification-file FILE]

  Create a staked Shelley genesis file from a genesis template and
  genesis/delegation/spending keys.

Usage: cardano-cli genesis hash --genesis FILE

  Compute the hash of a genesis file

Usage: cardano-cli query 
            ( protocol-parameters
            | tip
            | stake-pools
            | stake-distribution
            | stake-address-info
            | utxo
            | ledger-state
            | protocol-state
            | stake-snapshot
            | leadership-schedule
            | kes-period-info
            | pool-state
            | tx-mempool
            | slot-number
            )

  Node query commands. Will query the local node whose Unix domain socket is
  obtained from the CARDANO_NODE_SOCKET_PATH environment variable.

Usage: cardano-cli query protocol-parameters --socket-path SOCKET_PATH
            [ --shelley-mode
            | --byron-mode [--epoch-slots SLOTS]
            | --cardano-mode [--epoch-slots SLOTS]
            ]
            (--mainnet | --testnet-magic NATURAL)
            [--out-file FILE]

  Get the node's current protocol parameters

Usage: cardano-cli query tip --socket-path SOCKET_PATH
            [ --shelley-mode
            | --byron-mode [--epoch-slots SLOTS]
            | --cardano-mode [--epoch-slots SLOTS]
            ]
            (--mainnet | --testnet-magic NATURAL)
            [--out-file FILE]

  Get the node's current tip (slot no, hash, block no)

Usage: cardano-cli query stake-pools --socket-path SOCKET_PATH
            [ --shelley-mode
            | --byron-mode [--epoch-slots SLOTS]
            | --cardano-mode [--epoch-slots SLOTS]
            ]
            (--mainnet | --testnet-magic NATURAL)
            [--out-file FILE]

  Get the node's current set of stake pool ids

Usage: cardano-cli query stake-distribution --socket-path SOCKET_PATH
            [ --shelley-mode
            | --byron-mode [--epoch-slots SLOTS]
            | --cardano-mode [--epoch-slots SLOTS]
            ]
            (--mainnet | --testnet-magic NATURAL)
            [--out-file FILE]

  Get the node's current aggregated stake distribution

Usage: cardano-cli query stake-address-info --socket-path SOCKET_PATH
            [ --shelley-mode
            | --byron-mode [--epoch-slots SLOTS]
            | --cardano-mode [--epoch-slots SLOTS]
            ]
            --address ADDRESS
            (--mainnet | --testnet-magic NATURAL)
            [--out-file FILE]

  Get the current delegations and reward accounts filtered by stake address.

Usage: cardano-cli query utxo --socket-path SOCKET_PATH
            [ --shelley-mode
            | --byron-mode [--epoch-slots SLOTS]
            | --cardano-mode [--epoch-slots SLOTS]
            ]
            (--whole-utxo | (--address ADDRESS) | (--tx-in TX-IN))
            (--mainnet | --testnet-magic NATURAL)
            [--out-file FILE]

  Get a portion of the current UTxO: by tx in, by address or the whole.

Usage: cardano-cli query ledger-state --socket-path SOCKET_PATH
            [ --shelley-mode
            | --byron-mode [--epoch-slots SLOTS]
            | --cardano-mode [--epoch-slots SLOTS]
            ]
            (--mainnet | --testnet-magic NATURAL)
            [--out-file FILE]

  Dump the current ledger state of the node (Ledger.NewEpochState -- advanced
  command)

Usage: cardano-cli query protocol-state --socket-path SOCKET_PATH
            [ --shelley-mode
            | --byron-mode [--epoch-slots SLOTS]
            | --cardano-mode [--epoch-slots SLOTS]
            ]
            (--mainnet | --testnet-magic NATURAL)
            [--out-file FILE]

  Dump the current protocol state of the node (Ledger.ChainDepState -- advanced
  command)

Usage: cardano-cli query stake-snapshot --socket-path SOCKET_PATH
            [ --shelley-mode
            | --byron-mode [--epoch-slots SLOTS]
            | --cardano-mode [--epoch-slots SLOTS]
            ]
            (--mainnet | --testnet-magic NATURAL)
            [--all-stake-pools | [--stake-pool-id STAKE_POOL_ID]]
            [--out-file FILE]

  Obtain the three stake snapshots for a pool, plus the total active stake
  (advanced command)

Usage: cardano-cli query pool-params --socket-path SOCKET_PATH
            [ --shelley-mode
            | --byron-mode [--epoch-slots SLOTS]
            | --cardano-mode [--epoch-slots SLOTS]
            ]
            (--mainnet | --testnet-magic NATURAL)
            [--stake-pool-id STAKE_POOL_ID]

  DEPRECATED. Use query pool-state instead. Dump the pool parameters
  (Ledger.NewEpochState.esLState._delegationState._pState._pParams -- advanced
  command)

Usage: cardano-cli query leadership-schedule --socket-path SOCKET_PATH
            [ --shelley-mode
            | --byron-mode [--epoch-slots SLOTS]
            | --cardano-mode [--epoch-slots SLOTS]
            ]
            (--mainnet | --testnet-magic NATURAL)
            --genesis FILE
            ( --stake-pool-verification-key STRING
            | --cold-verification-key-file FILE
            | --stake-pool-id STAKE_POOL_ID
            )
            --vrf-signing-key-file FILE
            (--current | --next)
            [--out-file FILE]

  Get the slots the node is expected to mint a block in (advanced command)

Usage: cardano-cli query kes-period-info --socket-path SOCKET_PATH
            [ --shelley-mode
            | --byron-mode [--epoch-slots SLOTS]
            | --cardano-mode [--epoch-slots SLOTS]
            ]
            (--mainnet | --testnet-magic NATURAL)
            --op-cert-file FILE
            [--out-file FILE]

  Get information about the current KES period and your node's operational
  certificate.

Usage: cardano-cli query pool-state --socket-path SOCKET_PATH
            [ --shelley-mode
            | --byron-mode [--epoch-slots SLOTS]
            | --cardano-mode [--epoch-slots SLOTS]
            ]
            (--mainnet | --testnet-magic NATURAL)
            [--stake-pool-id STAKE_POOL_ID]

  Dump the pool state

Usage: cardano-cli query tx-mempool --socket-path SOCKET_PATH
            [ --shelley-mode
            | --byron-mode [--epoch-slots SLOTS]
            | --cardano-mode [--epoch-slots SLOTS]
            ]
            (--mainnet | --testnet-magic NATURAL)
            (info | next-tx | tx-exists)
            [--out-file FILE]

  Local Mempool info

Usage: cardano-cli query tx-mempool info 

  Ask the node about the current mempool's capacity and sizes

Usage: cardano-cli query tx-mempool next-tx 

  Requests the next transaction from the mempool's current list

Usage: cardano-cli query tx-mempool tx-exists TX_ID

  Query if a particular transaction exists in the mempool

Usage: cardano-cli query slot-number --socket-path SOCKET_PATH
            [ --shelley-mode
            | --byron-mode [--epoch-slots SLOTS]
            | --cardano-mode [--epoch-slots SLOTS]
            ]
            (--mainnet | --testnet-magic NATURAL)
            TIMESTAMP

  Query slot number for UTC timestamp

Usage: cardano-cli stake-pool 
            ( registration-certificate
            | deregistration-certificate
            | id
            | metadata-hash
            )

  Stake pool commands

Usage: cardano-cli stake-pool registration-certificate 
            ( --stake-pool-verification-key STRING
            | --cold-verification-key-file FILE
            )
            (--vrf-verification-key STRING | --vrf-verification-key-file FILE)
            --pool-pledge LOVELACE
            --pool-cost LOVELACE
            --pool-margin RATIONAL
            ( --pool-reward-account-verification-key STRING
            | --pool-reward-account-verification-key-file FILE
            )
            ( --pool-owner-verification-key STRING
            | --pool-owner-stake-verification-key-file FILE
            )
            [ [--pool-relay-ipv4 STRING]
              [--pool-relay-ipv6 STRING]
              --pool-relay-port INT
            | --single-host-pool-relay STRING [--pool-relay-port INT]
            | --multi-host-pool-relay STRING
            ]
            [--metadata-url URL --metadata-hash HASH]
            (--mainnet | --testnet-magic NATURAL)
            --out-file FILE

  Create a stake pool registration certificate

Usage: cardano-cli stake-pool deregistration-certificate 
            ( --stake-pool-verification-key STRING
            | --cold-verification-key-file FILE
            )
            --epoch NATURAL
            --out-file FILE

  Create a stake pool deregistration certificate

Usage: cardano-cli stake-pool id 
            ( --stake-pool-verification-key STRING
            | --cold-verification-key-file FILE
            )
            [--output-format STRING]
            [--out-file FILE]

  Build pool id from the offline key

Usage: cardano-cli stake-pool metadata-hash --pool-metadata-file FILE
            [--out-file FILE]

  Print the hash of pool metadata.

Usage: cardano-cli node 
            ( key-gen
            | key-gen-KES
            | key-gen-VRF
            | key-hash-VRF
            | new-counter
            | issue-op-cert
            )

  Node operation commands

Usage: cardano-cli node key-gen [--key-output-format STRING]
            --cold-verification-key-file FILE
            --cold-signing-key-file FILE
            --operational-certificate-issue-counter-file FILE

  Create a key pair for a node operator's offline key and a new certificate
  issue counter

Usage: cardano-cli node key-gen-KES [--key-output-format STRING]
            --verification-key-file FILE
            --signing-key-file FILE

  Create a key pair for a node KES operational key

Usage: cardano-cli node key-gen-VRF [--key-output-format STRING]
            --verification-key-file FILE
            --signing-key-file FILE

  Create a key pair for a node VRF operational key

Usage: cardano-cli node key-hash-VRF 
            (--verification-key STRING | --verification-key-file FILE)
            [--out-file FILE]

  Print hash of a node's operational VRF key.

Usage: cardano-cli node new-counter 
            ( --stake-pool-verification-key STRING
            | --genesis-delegate-verification-key STRING
            | --cold-verification-key-file FILE
            )
            --counter-value INT
            --operational-certificate-issue-counter-file FILE

  Create a new certificate issue counter

Usage: cardano-cli node issue-op-cert 
            (--kes-verification-key STRING | --kes-verification-key-file FILE)
            --cold-signing-key-file FILE
            --operational-certificate-issue-counter-file FILE
            --kes-period NATURAL
            --out-file FILE

  Issue a node operational certificate

Usage: cardano-cli transaction 
            ( build-raw
            | build
            | sign
            | witness
            | assemble
            | submit
            | policyid
            | calculate-min-fee
            | calculate-min-required-utxo
            | hash-script-data
            | txid
            | view
            )

  Transaction commands

Usage: cardano-cli transaction build-raw 
            [ --byron-era
            | --shelley-era
            | --allegra-era
            | --mary-era
            | --alonzo-era
            | --babbage-era
            ]
            [--script-valid | --script-invalid]
            (--tx-in TX-IN
              [ --spending-tx-in-reference TX-IN
                --spending-plutus-script-v2
                ( --spending-reference-tx-in-datum-cbor-file CBOR FILE
                | --spending-reference-tx-in-datum-file JSON FILE
                | --spending-reference-tx-in-datum-value JSON VALUE
                | --spending-reference-tx-in-inline-datum-present
                )
                ( --spending-reference-tx-in-redeemer-cbor-file CBOR FILE
                | --spending-reference-tx-in-redeemer-file JSON FILE
                | --spending-reference-tx-in-redeemer-value JSON VALUE
                )
                --spending-reference-tx-in-execution-units (INT, INT)
              | --simple-script-tx-in-reference TX-IN
              | --tx-in-script-file FILE
                [
                  ( --tx-in-datum-cbor-file CBOR FILE
                  | --tx-in-datum-file JSON FILE
                  | --tx-in-datum-value JSON VALUE
                  | --tx-in-inline-datum-present
                  )
                  ( --tx-in-redeemer-cbor-file CBOR FILE
                  | --tx-in-redeemer-file JSON FILE
                  | --tx-in-redeemer-value JSON VALUE
                  )
                  --tx-in-execution-units (INT, INT)]
              ])
            [--read-only-tx-in-reference TX-IN]
            [--tx-in-collateral TX-IN]
            [--tx-out-return-collateral ADDRESS VALUE]
            [--tx-total-collateral INTEGER]
            [--required-signer FILE | --required-signer-hash HASH]
            [--tx-out ADDRESS VALUE
              [ --tx-out-datum-hash HASH
              | --tx-out-datum-hash-cbor-file CBOR FILE
              | --tx-out-datum-hash-file JSON FILE
              | --tx-out-datum-hash-value JSON VALUE
              | --tx-out-datum-embed-cbor-file CBOR FILE
              | --tx-out-datum-embed-file JSON FILE
              | --tx-out-datum-embed-value JSON VALUE
              | --tx-out-inline-datum-cbor-file CBOR FILE
              | --tx-out-inline-datum-file JSON FILE
              | --tx-out-inline-datum-value JSON VALUE
              ]
              [--tx-out-reference-script-file FILE]]
            [--mint VALUE
              ( --mint-script-file FILE
                [
                  ( --mint-redeemer-cbor-file CBOR FILE
                  | --mint-redeemer-file JSON FILE
                  | --mint-redeemer-value JSON VALUE
                  )
                  --mint-execution-units (INT, INT)]
              | --simple-minting-script-tx-in-reference TX-IN --policy-id HASH
              | --mint-tx-in-reference TX-IN
                --mint-plutus-script-v2
                ( --mint-reference-tx-in-redeemer-cbor-file CBOR FILE
                | --mint-reference-tx-in-redeemer-file JSON FILE
                | --mint-reference-tx-in-redeemer-value JSON VALUE
                )
                --mint-reference-tx-in-execution-units (INT, INT)
                --policy-id HASH
              )]
            [--invalid-before SLOT]
            [--invalid-hereafter SLOT]
            [--fee LOVELACE]
            [--certificate-file CERTIFICATEFILE
              [ --certificate-script-file FILE
                [
                  ( --certificate-redeemer-cbor-file CBOR FILE
                  | --certificate-redeemer-file JSON FILE
                  | --certificate-redeemer-value JSON VALUE
                  )
                  --certificate-execution-units (INT, INT)]
              | --certificate-tx-in-reference TX-IN
                --certificate-plutus-script-v2
                ( --certificate-reference-tx-in-redeemer-cbor-file CBOR FILE
                | --certificate-reference-tx-in-redeemer-file JSON FILE
                | --certificate-reference-tx-in-redeemer-value JSON VALUE
                )
                --certificate-reference-tx-in-execution-units (INT, INT)
              ]]
            [--withdrawal WITHDRAWAL
              [ --withdrawal-script-file FILE
                [
                  ( --withdrawal-redeemer-cbor-file CBOR FILE
                  | --withdrawal-redeemer-file JSON FILE
                  | --withdrawal-redeemer-value JSON VALUE
                  )
                  --withdrawal-execution-units (INT, INT)]
              | --withdrawal-tx-in-reference TX-IN
                --withdrawal-plutus-script-v2
                ( --withdrawal-reference-tx-in-redeemer-cbor-file CBOR FILE
                | --withdrawal-reference-tx-in-redeemer-file JSON FILE
                | --withdrawal-reference-tx-in-redeemer-value JSON VALUE
                )
                --withdrawal-reference-tx-in-execution-units (INT, INT)
              ]]
            [--json-metadata-no-schema | --json-metadata-detailed-schema]
            [--auxiliary-script-file FILE]
            [--metadata-json-file FILE | --metadata-cbor-file FILE]
            [--protocol-params-file FILE]
            [--update-proposal-file FILE]
            --out-file FILE

  Build a transaction (low-level, inconvenient)

  Please note the order of some cmd options is crucial. If used incorrectly may produce undesired tx body. See nested [] notation above for details.[0;22;23;24m

Usage: cardano-cli transaction build --socket-path SOCKET_PATH
            [ --byron-era
            | --shelley-era
            | --allegra-era
            | --mary-era
            | --alonzo-era
            | --babbage-era
            ]
            [ --shelley-mode
            | --byron-mode [--epoch-slots SLOTS]
            | --cardano-mode [--epoch-slots SLOTS]
            ]
            (--mainnet | --testnet-magic NATURAL)
            [--script-valid | --script-invalid]
            [--witness-override WORD]
            (--tx-in TX-IN
              [ --spending-tx-in-reference TX-IN
                --spending-plutus-script-v2
                ( --spending-reference-tx-in-datum-cbor-file CBOR FILE
                | --spending-reference-tx-in-datum-file JSON FILE
                | --spending-reference-tx-in-datum-value JSON VALUE
                | --spending-reference-tx-in-inline-datum-present
                )
                ( --spending-reference-tx-in-redeemer-cbor-file CBOR FILE
                | --spending-reference-tx-in-redeemer-file JSON FILE
                | --spending-reference-tx-in-redeemer-value JSON VALUE
                )
              | --simple-script-tx-in-reference TX-IN
              | --tx-in-script-file FILE
                [
                  ( --tx-in-datum-cbor-file CBOR FILE
                  | --tx-in-datum-file JSON FILE
                  | --tx-in-datum-value JSON VALUE
                  | --tx-in-inline-datum-present
                  )
                  ( --tx-in-redeemer-cbor-file CBOR FILE
                  | --tx-in-redeemer-file JSON FILE
                  | --tx-in-redeemer-value JSON VALUE
                  )]
              ])
            [--read-only-tx-in-reference TX-IN]
            [--required-signer FILE | --required-signer-hash HASH]
            [--tx-in-collateral TX-IN]
            [--tx-out-return-collateral ADDRESS VALUE]
            [--tx-total-collateral INTEGER]
            [--tx-out ADDRESS VALUE
              [ --tx-out-datum-hash HASH
              | --tx-out-datum-hash-cbor-file CBOR FILE
              | --tx-out-datum-hash-file JSON FILE
              | --tx-out-datum-hash-value JSON VALUE
              | --tx-out-datum-embed-cbor-file CBOR FILE
              | --tx-out-datum-embed-file JSON FILE
              | --tx-out-datum-embed-value JSON VALUE
              | --tx-out-inline-datum-cbor-file CBOR FILE
              | --tx-out-inline-datum-file JSON FILE
              | --tx-out-inline-datum-value JSON VALUE
              ]
              [--tx-out-reference-script-file FILE]]
            --change-address ADDRESS
            [--mint VALUE
              ( --mint-script-file FILE
                [ --mint-redeemer-cbor-file CBOR FILE
                | --mint-redeemer-file JSON FILE
                | --mint-redeemer-value JSON VALUE
                ]
              | --simple-minting-script-tx-in-reference TX-IN --policy-id HASH
              | --mint-tx-in-reference TX-IN
                --mint-plutus-script-v2
                ( --mint-reference-tx-in-redeemer-cbor-file CBOR FILE
                | --mint-reference-tx-in-redeemer-file JSON FILE
                | --mint-reference-tx-in-redeemer-value JSON VALUE
                )
                --policy-id HASH
              )]
            [--invalid-before SLOT]
            [--invalid-hereafter SLOT]
            [--certificate-file CERTIFICATEFILE
              [ --certificate-script-file FILE
                [ --certificate-redeemer-cbor-file CBOR FILE
                | --certificate-redeemer-file JSON FILE
                | --certificate-redeemer-value JSON VALUE
                ]
              | --certificate-tx-in-reference TX-IN
                --certificate-plutus-script-v2
                ( --certificate-reference-tx-in-redeemer-cbor-file CBOR FILE
                | --certificate-reference-tx-in-redeemer-file JSON FILE
                | --certificate-reference-tx-in-redeemer-value JSON VALUE
                )
              ]]
            [--withdrawal WITHDRAWAL
              [ --withdrawal-script-file FILE
                [ --withdrawal-redeemer-cbor-file CBOR FILE
                | --withdrawal-redeemer-file JSON FILE
                | --withdrawal-redeemer-value JSON VALUE
                ]
              | --withdrawal-tx-in-reference TX-IN
                --withdrawal-plutus-script-v2
                ( --withdrawal-reference-tx-in-redeemer-cbor-file CBOR FILE
                | --withdrawal-reference-tx-in-redeemer-file JSON FILE
                | --withdrawal-reference-tx-in-redeemer-value JSON VALUE
                )
              ]]
            [--json-metadata-no-schema | --json-metadata-detailed-schema]
            [--auxiliary-script-file FILE]
            [--metadata-json-file FILE | --metadata-cbor-file FILE]
            [--protocol-params-file FILE]
            [--update-proposal-file FILE]
            (--out-file FILE | --calculate-plutus-script-cost FILE)

  Build a balanced transaction (automatically calculates fees)

  Please note the order[93;22;23;24m of some cmd options is crucial. If used incorrectly may produce undesired tx body. See nested [] notation above for details.[0;22;23;24m

Usage: cardano-cli transaction sign (--tx-body-file FILE | --tx-file FILE)
            [--signing-key-file FILE [--address STRING]]
            [--mainnet | --testnet-magic NATURAL]
            --out-file FILE

  Sign a transaction

Usage: cardano-cli transaction witness --tx-body-file FILE
            --signing-key-file FILE
            [--address STRING]
            [--mainnet | --testnet-magic NATURAL]
            --out-file FILE

  Create a transaction witness

Usage: cardano-cli transaction assemble --tx-body-file FILE
            [--witness-file FILE]
            --out-file FILE

  Assemble a tx body and witness(es) to form a transaction

Usage: cardano-cli transaction sign-witness --tx-body-file FILE
            [--witness-file FILE]
            --out-file FILE

  Assemble a tx body and witness(es) to form a transaction

Usage: cardano-cli transaction submit --socket-path SOCKET_PATH
            [ --shelley-mode
            | --byron-mode [--epoch-slots SLOTS]
            | --cardano-mode [--epoch-slots SLOTS]
            ]
            (--mainnet | --testnet-magic NATURAL)
            --tx-file FILE

  Submit a transaction to the local node whose Unix domain socket is obtained
  from the CARDANO_NODE_SOCKET_PATH environment variable.

Usage: cardano-cli transaction policyid --script-file FILE

  Calculate the PolicyId from the monetary policy script.

Usage: cardano-cli transaction calculate-min-fee --tx-body-file FILE
            (--mainnet | --testnet-magic NATURAL)
            --protocol-params-file FILE
            --tx-in-count NATURAL
            --tx-out-count NATURAL
            --witness-count NATURAL
            [--byron-witness-count NATURAL]

  Calculate the minimum fee for a transaction.

Usage: cardano-cli transaction calculate-min-required-utxo 
            [ --byron-era
            | --shelley-era
            | --allegra-era
            | --mary-era
            | --alonzo-era
            | --babbage-era
            ]
            --protocol-params-file FILE
            --tx-out ADDRESS VALUE
            [ --tx-out-datum-hash HASH
            | --tx-out-datum-hash-cbor-file CBOR FILE
            | --tx-out-datum-hash-file JSON FILE
            | --tx-out-datum-hash-value JSON VALUE
            | --tx-out-datum-embed-cbor-file CBOR FILE
            | --tx-out-datum-embed-file JSON FILE
            | --tx-out-datum-embed-value JSON VALUE
            | --tx-out-inline-datum-cbor-file CBOR FILE
            | --tx-out-inline-datum-file JSON FILE
            | --tx-out-inline-datum-value JSON VALUE
            ]
            [--tx-out-reference-script-file FILE]

  Calculate the minimum required UTxO for a transaction output.

Usage: cardano-cli transaction calculate-min-value 
            [ --byron-era
            | --shelley-era
            | --allegra-era
            | --mary-era
            | --alonzo-era
            | --babbage-era
            ]
            --protocol-params-file FILE
            --tx-out ADDRESS VALUE
            [ --tx-out-datum-hash HASH
            | --tx-out-datum-hash-cbor-file CBOR FILE
            | --tx-out-datum-hash-file JSON FILE
            | --tx-out-datum-hash-value JSON VALUE
            | --tx-out-datum-embed-cbor-file CBOR FILE
            | --tx-out-datum-embed-file JSON FILE
            | --tx-out-datum-embed-value JSON VALUE
            | --tx-out-inline-datum-cbor-file CBOR FILE
            | --tx-out-inline-datum-file JSON FILE
            | --tx-out-inline-datum-value JSON VALUE
            ]
            [--tx-out-reference-script-file FILE]

  DEPRECATED: Use 'calculate-min-required-utxo' instead.

Usage: cardano-cli transaction hash-script-data 
            ( --script-data-cbor-file CBOR FILE
            | --script-data-file JSON FILE
            | --script-data-value JSON VALUE
            )

  Calculate the hash of script data.

Usage: cardano-cli transaction txid (--tx-body-file FILE | --tx-file FILE)

  Print a transaction identifier.

Usage: cardano-cli transaction view (--tx-body-file FILE | --tx-file FILE)

  Print a transaction.

Usage: cardano-cli key 
            ( verification-key
            | non-extended-key
            | convert-byron-key
            | convert-byron-genesis-vkey
            | convert-itn-key
            | convert-itn-extended-key
            | convert-itn-bip32-key
            | convert-cardano-address-key
            )

  Key utility commands

Usage: cardano-cli key verification-key --signing-key-file FILE
            --verification-key-file FILE

  Get a verification key from a signing key. This supports all key types.

Usage: cardano-cli key non-extended-key --extended-verification-key-file FILE
            --verification-key-file FILE

  Get a non-extended verification key from an extended verification key. This
  supports all extended key types.

Usage: cardano-cli key convert-byron-key [--password TEXT]
            ( --byron-payment-key-type
            | --legacy-byron-payment-key-type
            | --byron-genesis-key-type
            | --legacy-byron-genesis-key-type
            | --byron-genesis-delegate-key-type
            | --legacy-byron-genesis-delegate-key-type
            )
            (--byron-signing-key-file FILE | --byron-verification-key-file FILE)
            --out-file FILE

  Convert a Byron payment, genesis or genesis delegate key (signing or
  verification) to a corresponding Shelley-format key.

Usage: cardano-cli key convert-byron-genesis-vkey --byron-genesis-verification-key BASE64
            --out-file FILE

  Convert a Base64-encoded Byron genesis verification key to a Shelley genesis
  verification key

Usage: cardano-cli key convert-itn-key 
            (--itn-signing-key-file FILE | --itn-verification-key-file FILE)
            --out-file FILE

  Convert an Incentivized Testnet (ITN) non-extended (Ed25519) signing or
  verification key to a corresponding Shelley stake key

Usage: cardano-cli key convert-itn-extended-key --itn-signing-key-file FILE
            --out-file FILE

  Convert an Incentivized Testnet (ITN) extended (Ed25519Extended) signing key
  to a corresponding Shelley stake signing key

Usage: cardano-cli key convert-itn-bip32-key --itn-signing-key-file FILE
            --out-file FILE

  Convert an Incentivized Testnet (ITN) BIP32 (Ed25519Bip32) signing key to a
  corresponding Shelley stake signing key

Usage: cardano-cli key convert-cardano-address-key 
            ( --shelley-payment-key
            | --shelley-stake-key
            | --icarus-payment-key
            | --byron-payment-key
            )
            --signing-key-file FILE
            --out-file FILE

  Convert a cardano-address extended signing key to a corresponding
  Shelley-format key.

Usage: cardano-cli stake-address 
            ( key-gen
            | build
            | key-hash
            | registration-certificate
            | deregistration-certificate
            | delegation-certificate
            )

  Stake address commands

Usage: cardano-cli stake-address key-gen [--key-output-format STRING]
            --verification-key-file FILE
            --signing-key-file FILE

  Create a stake address key pair

Usage: cardano-cli stake-address build 
            ( --stake-verification-key STRING
            | --stake-verification-key-file FILE
            | --stake-script-file FILE
            )
            (--mainnet | --testnet-magic NATURAL)
            [--out-file FILE]

  Build a stake address

Usage: cardano-cli stake-address key-hash 
            ( --stake-verification-key STRING
            | --stake-verification-key-file FILE
            )
            [--out-file FILE]

  Print the hash of a stake address key.

Usage: cardano-cli stake-address registration-certificate 
            ( --stake-verification-key STRING
            | --stake-verification-key-file FILE
            | --stake-script-file FILE
            | --stake-address ADDRESS
            )
            --out-file FILE

  Create a stake address registration certificate

Usage: cardano-cli stake-address deregistration-certificate 
            ( --stake-verification-key STRING
            | --stake-verification-key-file FILE
            | --stake-script-file FILE
            | --stake-address ADDRESS
            )
            --out-file FILE

  Create a stake address deregistration certificate

Usage: cardano-cli stake-address delegation-certificate 
            ( --stake-verification-key STRING
            | --stake-verification-key-file FILE
            | --stake-script-file FILE
            | --stake-address ADDRESS
            )
            ( --stake-pool-verification-key STRING
            | --cold-verification-key-file FILE
            | --stake-pool-id STAKE_POOL_ID
            )
            --out-file FILE

  Create a stake address pool delegation certificate

Usage: cardano-cli address (key-gen | key-hash | build | info)

  Payment address commands

Usage: cardano-cli address key-gen [--key-output-format STRING]
            [--normal-key | --extended-key | --byron-key]
            --verification-key-file FILE
            --signing-key-file FILE

  Create an address key pair.

Usage: cardano-cli address key-hash 
            ( --payment-verification-key STRING
            | --payment-verification-key-file FILE
            )
            [--out-file FILE]

  Print the hash of an address key.

Usage: cardano-cli address build 
            ( --payment-verification-key STRING
            | --payment-verification-key-file FILE
            | --payment-script-file FILE
            )
            [ --stake-verification-key STRING
            | --stake-verification-key-file FILE
            | --stake-script-file FILE
            | --stake-address ADDRESS
            ]
            (--mainnet | --testnet-magic NATURAL)
            [--out-file FILE]

  Build a Shelley payment address, with optional delegation to a stake address.

Usage: cardano-cli address info --address ADDRESS [--out-file FILE]

  Print information about an address.

Usage: cardano-cli byron 
            (key | transaction | query | genesis | governance | miscellaneous)

  Byron specific commands

Usage: cardano-cli byron key 
          ( keygen
          | to-verification
          | signing-key-public
          | signing-key-address
          | migrate-delegate-key-from
          )

  Byron key utility commands

Usage: cardano-cli byron key keygen --secret FILEPATH

  Generate a signing key.

Usage: cardano-cli byron key to-verification 
            [--byron-legacy-formats | --byron-formats]
            --secret FILEPATH
            --to FILEPATH

  Extract a verification key in its base64 form.

Usage: cardano-cli byron key signing-key-public 
            [--byron-legacy-formats | --byron-formats]
            --secret FILEPATH

  Pretty-print a signing key's verification key (not a secret).

Usage: cardano-cli byron key signing-key-address 
            [--byron-legacy-formats | --byron-formats]
            (--mainnet | --testnet-magic NATURAL)
            --secret FILEPATH

  Print address of a signing key.

Usage: cardano-cli byron key migrate-delegate-key-from --from FILEPATH
            --to FILEPATH

  Migrate a delegate key from an older version.

Usage: cardano-cli byron transaction 
          ( submit-tx
          | issue-genesis-utxo-expenditure
          | issue-utxo-expenditure
          | txid
          )

  Byron transaction commands

Usage: cardano-cli byron transaction submit-tx --socket-path SOCKET_PATH
            (--mainnet | --testnet-magic NATURAL)
            --tx FILEPATH

  Submit a raw, signed transaction, in its on-wire representation.

Usage: cardano-cli byron transaction issue-genesis-utxo-expenditure --genesis-json FILEPATH
            (--mainnet | --testnet-magic NATURAL)
            [--byron-legacy-formats | --byron-formats]
            --tx FILEPATH
            --wallet-key FILEPATH
            --rich-addr-from ADDR
            (--txout '("ADDR", LOVELACE)')

  Write a file with a signed transaction, spending genesis UTxO.

Usage: cardano-cli byron transaction issue-utxo-expenditure 
            (--mainnet | --testnet-magic NATURAL)
            [--byron-legacy-formats | --byron-formats]
            --tx FILEPATH
            --wallet-key FILEPATH
            (--txin (TXID,INDEX))
            (--txout '("ADDR", LOVELACE)')

  Write a file with a signed transaction, spending normal UTxO.

Usage: cardano-cli byron transaction txid --tx FILEPATH

  Print the txid of a raw, signed transaction.

Usage: cardano-cli byron query get-tip

  Byron node query commands.

Usage: cardano-cli byron query get-tip --socket-path SOCKET_PATH
            (--mainnet | --testnet-magic NATURAL)

  Get the tip of your local node's blockchain

Usage: cardano-cli byron genesis (genesis | print-genesis-hash)

  Byron genesis block commands

Usage: cardano-cli byron genesis genesis --genesis-output-dir FILEPATH
            --start-time POSIXSECONDS
            --protocol-parameters-file FILEPATH
            --k INT
            --protocol-magic INT
            --n-poor-addresses INT
            --n-delegate-addresses INT
            --total-balance INT
            --delegate-share DOUBLE
            --avvm-entry-count INT
            --avvm-entry-balance INT
            [--avvm-balance-factor DOUBLE]
            [--secret-seed INT]

  Create genesis.

Usage: cardano-cli byron genesis print-genesis-hash --genesis-json FILEPATH

  Compute hash of a genesis file.

Usage: cardano-cli byron governance COMMAND

  Byron governance commands

Usage: cardano-cli byron governance submit-proposal-vote 
            --socket-path SOCKET_PATH
            (--mainnet | --testnet-magic NATURAL)
            --filepath FILEPATH

  Submit a proposal vote.

Usage: cardano-cli byron governance submit-update-proposal 
            --socket-path SOCKET_PATH
            (--mainnet | --testnet-magic NATURAL)
            --filepath FILEPATH

  Submit an update proposal.

Usage: cardano-cli byron governance create-proposal-vote 
            (--mainnet | --testnet-magic NATURAL)
            --signing-key FILEPATH
            --proposal-filepath FILEPATH
            (--vote-yes | --vote-no)
            --output-filepath FILEPATH

  Create an update proposal vote.

Usage: cardano-cli byron governance create-update-proposal 
            (--mainnet | --testnet-magic NATURAL)
            --signing-key FILEPATH
            --protocol-version-major WORD16
            --protocol-version-minor WORD16
            --protocol-version-alt WORD8
            --application-name STRING
            --software-version-num WORD32
            --system-tag STRING
            --installer-hash HASH
            --filepath FILEPATH
            [--script-version WORD16]
            [--slot-duration NATURAL]
            [--max-block-size NATURAL]
            [--max-header-size NATURAL]
            [--max-tx-size NATURAL]
            [--max-proposal-size NATURAL]
            [--max-mpc-thd DOUBLE]
            [--heavy-del-thd DOUBLE]
            [--update-vote-thd DOUBLE]
            [--update-proposal-thd DOUBLE]
            [--time-to-live WORD64]
            [--softfork-init-thd DOUBLE
              --softfork-min-thd DOUBLE
              --softfork-thd-dec DOUBLE]
            [--tx-fee-a-constant INT --tx-fee-b-constant DOUBLE]
            [--unlock-stake-epoch WORD64]

  Create an update proposal.

Usage: cardano-cli byron miscellaneous (validate-cbor | pretty-print-cbor)

  Byron miscellaneous commands

Usage: cardano-cli byron miscellaneous validate-cbor 
            [ --byron-block INT
            | --byron-delegation-certificate
            | --byron-tx
            | --byron-update-proposal
            | --byron-vote
            ]
            --filepath FILEPATH

  Validate a CBOR blockchain object.

Usage: cardano-cli byron miscellaneous pretty-print-cbor --filepath FILEPATH

  Pretty print a CBOR file.

Usage: cardano-cli byron submit-proposal-vote --socket-path SOCKET_PATH
            (--mainnet | --testnet-magic NATURAL)
            --filepath FILEPATH

  Submit a proposal vote.

Usage: cardano-cli byron submit-update-proposal --socket-path SOCKET_PATH
            (--mainnet | --testnet-magic NATURAL)
            --filepath FILEPATH

  Submit an update proposal.

Usage: cardano-cli byron create-proposal-vote 
            (--mainnet | --testnet-magic NATURAL)
            --signing-key FILEPATH
            --proposal-filepath FILEPATH
            (--vote-yes | --vote-no)
            --output-filepath FILEPATH

  Create an update proposal vote.

Usage: cardano-cli byron create-update-proposal 
            (--mainnet | --testnet-magic NATURAL)
            --signing-key FILEPATH
            --protocol-version-major WORD16
            --protocol-version-minor WORD16
            --protocol-version-alt WORD8
            --application-name STRING
            --software-version-num WORD32
            --system-tag STRING
            --installer-hash HASH
            --filepath FILEPATH
            [--script-version WORD16]
            [--slot-duration NATURAL]
            [--max-block-size NATURAL]
            [--max-header-size NATURAL]
            [--max-tx-size NATURAL]
            [--max-proposal-size NATURAL]
            [--max-mpc-thd DOUBLE]
            [--heavy-del-thd DOUBLE]
            [--update-vote-thd DOUBLE]
            [--update-proposal-thd DOUBLE]
            [--time-to-live WORD64]
            [--softfork-init-thd DOUBLE
              --softfork-min-thd DOUBLE
              --softfork-thd-dec DOUBLE]
            [--tx-fee-a-constant INT --tx-fee-b-constant DOUBLE]
            [--unlock-stake-epoch WORD64]

  Create an update proposal.

Usage: cardano-cli ping [-c|--count COUNT]
            ((-h|--host HOST) | (-u|--unixsock SOCKET))
            [-p|--port PORT]
            [-m|--magic MAGIC]
            [-j|--json]
            [-q|--quiet]

  Ping a cardano node either using node-to-node or node-to-client protocol. It negotiates a handshake and keeps sending keep alive messages.

Usage: cardano-cli genesis --genesis-output-dir FILEPATH
            --start-time POSIXSECONDS
            --protocol-parameters-file FILEPATH
            --k INT
            --protocol-magic INT
            --n-poor-addresses INT
            --n-delegate-addresses INT
            --total-balance INT
            --delegate-share DOUBLE
            --avvm-entry-count INT
            --avvm-entry-balance INT
            [--avvm-balance-factor DOUBLE]
            [--secret-seed INT]

  Create genesis.

Usage: cardano-cli print-genesis-hash --genesis-json FILEPATH

  Compute hash of a genesis file.

Usage: cardano-cli keygen --secret FILEPATH

  Generate a signing key.

Usage: cardano-cli to-verification [--byron-legacy-formats | --byron-formats]
            --secret FILEPATH
            --to FILEPATH

  Extract a verification key in its base64 form.

Usage: cardano-cli signing-key-public [--byron-legacy-formats | --byron-formats]
            --secret FILEPATH

  Pretty-print a signing key's verification key (not a secret).

Usage: cardano-cli signing-key-address 
            [--byron-legacy-formats | --byron-formats]
            (--mainnet | --testnet-magic NATURAL)
            --secret FILEPATH

  Print address of a signing key.

Usage: cardano-cli migrate-delegate-key-from --from FILEPATH --to FILEPATH

  Migrate a delegate key from an older version.

Usage: cardano-cli submit-tx --socket-path SOCKET_PATH
            (--mainnet | --testnet-magic NATURAL)
            --tx FILEPATH

  Submit a raw, signed transaction, in its on-wire representation.

Usage: cardano-cli issue-genesis-utxo-expenditure --genesis-json FILEPATH
            (--mainnet | --testnet-magic NATURAL)
            [--byron-legacy-formats | --byron-formats]
            --tx FILEPATH
            --wallet-key FILEPATH
            --rich-addr-from ADDR
            (--txout '("ADDR", LOVELACE)')

  Write a file with a signed transaction, spending genesis UTxO.

Usage: cardano-cli issue-utxo-expenditure (--mainnet | --testnet-magic NATURAL)
            [--byron-legacy-formats | --byron-formats]
            --tx FILEPATH
            --wallet-key FILEPATH
            (--txin (TXID,INDEX))
            (--txout '("ADDR", LOVELACE)')

  Write a file with a signed transaction, spending normal UTxO.

Usage: cardano-cli txid --tx FILEPATH

  Print the txid of a raw, signed transaction.

Usage: cardano-cli get-tip --socket-path SOCKET_PATH
            (--mainnet | --testnet-magic NATURAL)

  Get the tip of your local node's blockchain

Usage: cardano-cli validate-cbor 
            [ --byron-block INT
            | --byron-delegation-certificate
            | --byron-tx
            | --byron-update-proposal
            | --byron-vote
            ]
            --filepath FILEPATH

  Validate a CBOR blockchain object.

Usage: cardano-cli pretty-print-cbor --filepath FILEPATH

  Pretty print a CBOR file.

Usage: cardano-cli version 

  Show the cardano-cli version

Usage: cardano-cli help 

  Show all help

