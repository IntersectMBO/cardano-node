* Development scripts

  Scripts in this directory are not strictly intended for end users,
  they rather serve as developer-oriented proving grounds for automation.

  As such, they break often, but also, by virtue of their existence, they provide
  some insight into how the executables provided by this repository can be used.

*** Index

    - chairman.sh :: Run the Chairman consensus checker against a cluster started
                     by =shelley-testnet= family of scripts
    - cluster-log.sh :: Visualise blockchain from logs emitted by =cluster-test.sh=
    - cluster-test.sh :: Run a CI-oriented cluster (consisting of Byron Rewrite
         nodes, a proxy and Byron Legacy nodes) in a VM, while capturing the logs
    - generator.sh :: Run the transaction generator against a cluster started
                     by =shelley-testnet= family of scripts
    - genesis.sh :: Generate a new genesis in the =configuration/= folder
    - get-default-key-address.sh :: Given a signing key, print its associated address
    - issue-genesis-utxo-expenditure.sh :: Write a file with a transaction
         spending a genesis UTxO entry, given a key owning it
    - issue-utxo-expenditure.sh :: Write a file with a transaction spending a
         normal UTxO entry, given a key owning it
    - mainnet-proxy-follower.sh :: Run a node against the Byron Proxy connected to
         Cardano Mainnet
    - shelley-testnet2.sh :: Start a dev cluster with 3 nodes and an acceptor,
         with neat curses-based UI (run from tmux)
    - shelley-testnet-dns.sh :: Start a dev cluster with 3 nodes (run from tmux)
    - shelley-testnet.sh :: Start a dev cluster with 3 nodes and an acceptor, with
         basic logging (run from tmux)
    - start-node.sh :: Basic individual node startup script
    - start-wallet.sh :: Start a basic wallet client
    - submit-tx.sh :: Submit a transaction file made by =issue-*-expenditure.sh=
                      family of scripts
    - trace-acceptor.sh :: Start a trace acceptor, to be used by nodes

*** CI cluster

***** Prerequisites

      Prerequisites include having the Nix package manager installed and suitably
      configured.

      Configuration consists of ensuring =/etc/nix/nix.conf= have:

      1. The IOHK Hydra binary cache enabled:

         - https://hydra.iohk.io must be in either of the =substituters= or the
           =binary-caches= space-separated list options
         - *hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=* must be
           present in the =public-keys= space-separated list option

      2. Configuration allowing KVM to be used by Nix:

         - =kvm= must be in the =system-features= space-separated list option

***** Running

      To launch the CI cluster, just execute the script:

      : ./scripts/cluster-test.sh

      It'll create a log file for the entire cluster's output in a file named
      =cluster.EPOCHTIME.COMMIT-ID.log=.

***** Logs

      Logs for individual machines can be extracted using the =cat= and =less=
      subcommands of =scripts/cluster-log.sh=:

      : scripts/cluster-log.sh --ip 10.1.0.2 cluster.1573270530.4158764bcaed9e6b.log less

***** Charting

      The logs can interpret to plot a chart of the produced blockchain (including forks),
      either from the standpoint of a single node, as specified by its IP address:

      : scripts/cluster-log.sh --ip 10.1.0.2 cluster.1573270530.4158764bcaed9e6b.log png

      ..or for the entire cluster:

      : scripts/cluster-log.sh --cluster 10.1.0.%s 1 7 cluster.1573270530.4158764bcaed9e6b.log png

      Both commands will produce PNG files for the relevant node's chart & launch
      the Eye of Gnome (eog) program to view that.

      The number of blocks to show is by default limited to 25.

      In the charts:

        - blue-colored blocks are made by Byron Rewrite nodes,
        - green-colored blocks are made by Byron Legacy nodes,
        - arrow labels have the public key of the block signer & its BFT id.
