-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Simple email sending via SMTP
--   
--   This packages provides a simple interface for mail over SMTP. Please
--   see the README for more information.
@package smtp-mail
@version 0.5.0.0

module Network.Mail.SMTP.Auth
type UserName = String
type Password = String
type Token = String
data AuthType
PLAIN :: AuthType
LOGIN :: AuthType
LOGIN_OAUTH :: AuthType
CRAM_MD5 :: AuthType
encodeLogin :: UserName -> Password -> (ByteString, ByteString)

-- | Encode the xoauth 2 message based on:
--   <a>https://docs.microsoft.com/en-us/exchange/client-developer/legacy-protocols/how-to-authenticate-an-imap-pop-smtp-application-by-using-oauth#sasl-xoauth2</a>
encodeLoginOAuth :: UserName -> Token -> ByteString
auth :: AuthType -> String -> UserName -> Password -> ByteString
instance GHC.Classes.Eq Network.Mail.SMTP.Auth.AuthType
instance GHC.Show.Show Network.Mail.SMTP.Auth.AuthType

module Network.Mail.SMTP.Types
data Command
HELO :: ByteString -> Command
EHLO :: ByteString -> Command
MAIL :: ByteString -> Command
RCPT :: ByteString -> Command
DATA :: ByteString -> Command
EXPN :: ByteString -> Command
VRFY :: ByteString -> Command
HELP :: ByteString -> Command
AUTH :: AuthType -> UserName -> Password -> Command
NOOP :: Command
RSET :: Command
QUIT :: Command
STARTTLS :: Command
type ReplyCode = Int
data Response
Ok :: Response
SystemStatus :: Response
HelpMessage :: Response
ServiceReady :: Response
ServiceClosing :: Response
UserNotLocal :: Response
CannotVerify :: Response
StartMailInput :: Response
ServiceNotAvailable :: Response
MailboxUnavailable :: Response
ErrorInProcessing :: Response
InsufficientSystemStorage :: Response
SyntaxError :: Response
ParameterError :: Response
CommandNotImplemented :: Response
BadSequence :: Response
ParameterNotImplemented :: Response
MailboxUnavailableError :: Response
UserNotLocalError :: Response
ExceededStorage :: Response
MailboxNotAllowed :: Response
TransactionFailed :: Response
type UserName = String
type Password = String
data AuthType
PLAIN :: AuthType
LOGIN :: AuthType
LOGIN_OAUTH :: AuthType
CRAM_MD5 :: AuthType
data () => Address
Address :: Maybe Text -> Text -> Address
[addressName] :: Address -> Maybe Text
[addressEmail] :: Address -> Text
instance GHC.Classes.Eq Network.Mail.SMTP.Types.Command
instance GHC.Show.Show Network.Mail.SMTP.Types.Command
instance GHC.Classes.Eq Network.Mail.SMTP.Types.Response
instance GHC.Show.Show Network.Mail.SMTP.Types.Response

module Network.Mail.SMTP

-- | Connect to an SMTP server, send a <a>Mail</a>, then disconnect. Uses
--   the default port (25).
sendMail :: HostName -> Mail -> IO ()

-- | Connect to an SMTP server, send a <a>Mail</a>, then disconnect.
sendMail' :: HostName -> PortNumber -> Mail -> IO ()

-- | Connect to an SMTP server, login, send a <a>Mail</a>, disconnect. Uses
--   the default port (25).
sendMailWithLogin :: HostName -> UserName -> Password -> Mail -> IO ()

-- | Connect to an SMTP server, login, send a <a>Mail</a>, disconnect.
sendMailWithLogin' :: HostName -> PortNumber -> UserName -> Password -> Mail -> IO ()

-- | Send a <a>Mail</a> with a given sender.
sendMailWithSender :: ByteString -> HostName -> Mail -> IO ()

-- | Send a <a>Mail</a> with a given sender.
sendMailWithSender' :: ByteString -> HostName -> PortNumber -> Mail -> IO ()

-- | Connect to an SMTP server, send a <a>Mail</a>, then disconnect. Uses
--   SMTPS with the default port (465).
sendMailTLS :: HostName -> Mail -> IO ()

-- | Connect to an SMTP server, send a <a>Mail</a>, then disconnect. Uses
--   SMTPS.
sendMailTLS' :: HostName -> PortNumber -> Mail -> IO ()

-- | Connect to an SMTP server, login, send a <a>Mail</a>, disconnect. Uses
--   SMTPS with its default port (465).
sendMailWithLoginTLS :: HostName -> UserName -> Password -> Mail -> IO ()

-- | Connect to an SMTP server, login, send a <a>Mail</a>, disconnect. Uses
--   SMTPS.
sendMailWithLoginTLS' :: HostName -> PortNumber -> UserName -> Password -> Mail -> IO ()

-- | Send a <a>Mail</a> with a given sender. Uses SMTPS with its default
--   port (465).
sendMailWithSenderTLS :: ByteString -> HostName -> Mail -> IO ()

-- | Send a <a>Mail</a> with a given sender. Uses SMTPS.
sendMailWithSenderTLS' :: ByteString -> HostName -> PortNumber -> Mail -> IO ()

-- | Connect to an SMTP server, send a <a>Mail</a>, then disconnect. Uses
--   STARTTLS with the default port (587).
sendMailSTARTTLS :: HostName -> Mail -> IO ()

-- | Connect to an SMTP server, send a <a>Mail</a>, then disconnect. Uses
--   STARTTLS.
sendMailSTARTTLS' :: HostName -> PortNumber -> Mail -> IO ()

-- | Connect to an SMTP server, login, send a <a>Mail</a>, disconnect. Uses
--   STARTTLS with the default port (587).
sendMailWithLoginSTARTTLS :: HostName -> UserName -> Password -> Mail -> IO ()

-- | Connect to an SMTP server, login, send a <a>Mail</a>, disconnect. Uses
--   STARTTLS.
sendMailWithLoginSTARTTLS' :: HostName -> PortNumber -> UserName -> Password -> Mail -> IO ()

-- | Connect to an SMTP server, login with OAuth, send a <a>Mail</a>,
--   disconnect. Uses STARTTLS with the default port (587).
sendMailWithLoginOAuthSTARTTLS :: HostName -> UserName -> Token -> Mail -> IO ()

-- | Connect to an SMTP server, login with OAuth, send a <a>Mail</a>,
--   disconnect. Uses STARTTLS.
sendMailWithLoginOAuthSTARTTLS' :: HostName -> PortNumber -> UserName -> Token -> Mail -> IO ()

-- | Send a <a>Mail</a> with a given sender. Uses STARTTLS with the default
--   port (587).
sendMailWithSenderSTARTTLS :: ByteString -> HostName -> Mail -> IO ()

-- | Send a <a>Mail</a> with a given sender. Uses STARTTLS.
sendMailWithSenderSTARTTLS' :: ByteString -> HostName -> PortNumber -> Mail -> IO ()

-- | A simple interface for generating a <a>Mail</a> with a plantext body
--   and an optional HTML body.
simpleMail :: Address -> [Address] -> [Address] -> [Address] -> Text -> [Part] -> Mail

-- | Construct a plain text <a>Part</a>

-- | <i>Deprecated: Use plainPart from mime-mail package</i>
plainTextPart :: Text -> Part

-- | Construct an html <a>Part</a>

-- | <i>Deprecated: Use htmlPart from mime-mail package</i>
htmlPart :: Text -> Part

-- | Construct a file attachment <a>Part</a>

-- | <i>Deprecated: Use filePart from mime-mail package</i>
filePart :: Text -> FilePath -> IO Part
data SMTPConnection
sendmail :: ByteString -> IO ()
sendmailCustom :: FilePath -> [String] -> ByteString -> IO ()
renderSendMail :: Mail -> IO ()
renderSendMailCustom :: FilePath -> [String] -> Mail -> IO ()

-- | Connect to an SMTP server with the specified host and default port
--   (25)
connectSMTP :: HostName -> IO SMTPConnection

-- | Connect to an SMTP server with the specified host via SMTPS on port
--   (465). According to RFC 8314 this should be preferred over STARTTLS if
--   the server offers it. If you need a different port number or more
--   sophisticated <a>TLSSettings</a> use
--   <a>connectSMTPWithHostNameAndTlsSettings</a>.
connectSMTPS :: HostName -> IO SMTPConnection

-- | Connect to an SMTP server with the specified host and default port
--   (587). Uses STARTTLS
connectSMTPSTARTTLS :: HostName -> IO SMTPConnection

-- | Connect to an SMTP server with the specified host and port
connectSMTP' :: HostName -> PortNumber -> IO SMTPConnection

-- | Connect to an SMTP server with the specified host and port using TLS
connectSMTPS' :: HostName -> PortNumber -> IO SMTPConnection

-- | Connect to an SMTP server with the specified host and port using
--   STARTTLS
connectSMTPSTARTTLS' :: HostName -> PortNumber -> IO SMTPConnection

-- | Connect to an SMTP server with the specified host and port
connectSMTPWithHostName :: HostName -> PortNumber -> IO String -> IO SMTPConnection

-- | Connect to an SMTP server with the specified host and port and maybe
--   via TLS
connectSMTPWithHostNameAndTlsSettings :: HostName -> PortNumber -> IO String -> Maybe TLSSettings -> IO SMTPConnection

-- | Connect to an SMTP server with the specified host and port using
--   STARTTLS
connectSMTPWithHostNameAndTlsSettingsSTARTTLS :: HostName -> PortNumber -> IO String -> TLSSettings -> IO SMTPConnection

-- | Send a <a>Command</a> to the SMTP server
sendCommand :: SMTPConnection -> Command -> IO (ReplyCode, ByteString)

-- | A convenience function that sends <a>AUTH</a> <a>LOGIN</a> to the
--   server
login :: SMTPConnection -> UserName -> Password -> IO (ReplyCode, ByteString)

-- | Send <a>QUIT</a> and close the connection.
closeSMTP :: SMTPConnection -> IO ()

-- | Render a <a>Mail</a> to a <a>ByteString</a> then send it over the
--   specified <a>SMTPConnection</a>
renderAndSend :: SMTPConnection -> Mail -> IO ()
renderAndSendFrom :: ByteString -> SMTPConnection -> Mail -> IO ()
instance GHC.Classes.Eq Network.Mail.SMTP.SMTPConnection
