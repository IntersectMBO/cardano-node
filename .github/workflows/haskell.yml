name: Haskell CI

on:
  push:
  workflow_dispatch:
    inputs:
      tests:
        description: 'Tests'
        required: false
        default: 'some'
        options:
        - some
        - all
  create:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        # Add more elements to this list to run multiple instances of the build in CI.  Increasing the
        # number instances is a good way to trigger flaky build failures
        n: [1]

        ghc: ["8.10.7", "9.2.5"]
        cabal: ["3.8.1.0"]
        os: [ubuntu-latest, macos-latest, windows-latest]

    env:
      # Modify this value to "invalidate" the cabal cache.
      CABAL_CACHE_VERSION: "2022-12-30"

      # Modify this value to "invalidate" the secp cache.
      SECP_CACHE_VERSION: "2022-12-30"

      # current ref from: 27.02.2022
      SECP256K1_REF: ac83be33d0956faf6b7f61a60ab524ef7d6a473a

    steps:
    - name: Workaround runner image issue
      if: runner.os == 'Linux'
      # https://github.com/actions/runner-images/issues/7061
      run: sudo chown -R $USER /usr/local/.ghcup

    - name: Install Haskell
      uses: input-output-hk/setup-haskell@v1
      id: setup-haskell
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: ${{ matrix.cabal }}
        pacman-packages: >
          mingw-w64-x86_64-pkg-config
          mingw-w64-x86_64-libsodium
          mingw-w64-x86_64-openssl
          base-devel
          autoconf-wrapper
          autoconf
          automake
          libtool
          make

    - uses: actions/checkout@v2

    - name: "[PowerShell] Add build script path"
      if: runner.os == 'Windows'
      shell: pwsh
      run: Add-Content $env:GITHUB_PATH "$(pwd)/.github/bin"

    - name: "[Bash] Add build script path"
      if: runner.os != 'Windows'
      run: echo "$(pwd)/.github/bin" >> $GITHUB_PATH

    - name: "LINUX: Install build environment (apt-get)"
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get -y install libsodium23 libsodium-dev
        sudo apt-get -y install libsystemd0 libsystemd-dev
        sudo apt-get -y remove --purge software-properties-common
        sudo apt-get -y autoremove

    - name: "LINUX: Install build environment (for secp256k1)"
      if: runner.os == 'Linux'
      run: sudo apt-get -y install autoconf automake libtool

    - name: "MAC: Install build environment (brew)"
      if: runner.os == 'macOS'
      run: |
        brew install libsodium

    - name: "MAC: Install build environment (for secp256k1)"
      if: runner.os == 'macOS'
      run: brew install autoconf automake libtool

    - name: Install secp256k1
      uses: input-output-hk/setup-secp256k1@v1
      with:
        git-ref: ${{ env.SECP256K1_REF }}
        cache-version: ${{ env.SECP_CACHE_VERSION }}

    - name: pkg-config inspection 1
      run: |
        brew install pkg-config

    - name: pkg-config inspection 1
      run: |
        pkg-config libsodium --libs

    - name: pkg-config inspection 2
      run: |
        pkg-config libsodium --cflags

    - name: pkg-config inspection 3
      run: |
        pkg-config --list-all

    - name: Cabal update
      run: cabal update

    - name: Configure build
      shell: bash
      run: |
        if [ "${{github.event.inputs.tests}}" == "all" ]; then
          echo "Reconfigure cabal projects to run tests for all dependencies"
          sed -i 's|tests: False|tests: True|g' cabal.project
        fi

        cp ".github/workflows/cabal.project.local.ci.$(uname -s)" cabal.project.local

        echo "# cabal.project.local"
        cat cabal.project.local

    - name: Build dry run
      run: |
        # The tests call out to msys2 commands. We generally do not want to mix toolchains, so
        # we are very deliberate about only adding msys64 to the path where absolutely necessary.
        ${{ (runner.os == 'Windows' && '$env:PATH=("C:\msys64\mingw64\bin;{0}" -f $env:PATH)') || '' }}
        cabal build all --dry-run --minimize-conflict-set

    # For users who fork cardano-node and want to define a writable cache, then can set up their own
    # S3 bucket then define in their forked repository settings the following secrets:
    #
    #   AWS_ACCESS_KEY_ID
    #   AWS_SECRET_ACCESS_KEY
    #   BINARY_CACHE_URI
    #   BINARY_CACHE_REGION
    - name: Cabal cache over S3
      uses: action-works/cabal-cache-s3@v1
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      with:
        region: ${{ secrets.BINARY_CACHE_REGION }}
        dist-dir: dist-newstyle
        store-path: ${{ steps.setup-haskell.outputs.cabal-store }}
        threads: 16
        archive-uri: ${{ secrets.BINARY_CACHE_URI }}/${{ env.CABAL_CACHE_VERSION }}/${{ runner.os }}
        skip: "${{ secrets.BINARY_CACHE_URI == '' }}"

    # It's important to ensure that people who fork this repository can not only successfully build in
    # CI by default, but also have meaning cabal store caching.
    #
    # Because syncing with S3 requires credentials, we cannot rely on S3 for this. For this reason a
    # https fallback is used. The https server mirrors the content of the S3 bucket. The https cabal
    # store archive is read-only for security reasons.
    #
    # Users who fork this repository who want to have a writable cabal store archive are encouraged
    # to set up their own S3 bucket.
    - name: Cabal cache over HTTPS
      uses: action-works/cabal-cache-s3@v1
      with:
        dist-dir: dist-newstyle
        store-path: ${{ steps.setup-haskell.outputs.cabal-store }}
        threads: 16
        archive-uri: https://iohk.cache.haskellworks.io/${{ env.CABAL_CACHE_VERSION }}/${{ runner.os }}
        skip: "${{ secrets.BINARY_CACHE_URI != '' }}"
        enable-save: false

    - name: Build core components
      run: |
        # The tests call out to msys2 commands. We generally do not want to mix toolchains, so
        # we are very deliberate about only adding msys64 to the path where absolutely necessary.
        ${{ (runner.os == 'Windows' && '$env:PATH=("C:\msys64\mingw64\bin;{0}" -f $env:PATH)') || '' }}
        cabal build cardano-node cardano-cli cardano-node-chairman cardano-submit-api -j1

    - name: Build remaining components
      run: |
        # The tests call out to msys2 commands. We generally do not want to mix toolchains, so
        # we are very deliberate about only adding msys64 to the path where absolutely necessary.
        ${{ (runner.os == 'Windows' && '$env:PATH=("C:\msys64\mingw64\bin;{0}" -f $env:PATH)') || '' }}
        cabal build all

    - name: Run tests (all)
      if: github.event.inputs.tests == 'all'
      env:
        TMPDIR: ${{ runner.temp }}
        TMP: ${{ runner.temp }}
        KEEP_WORKSPACE: 1
      run: |
        # The tests call out to msys2 commands. We generally do not want to mix toolchains, so
        # we are very deliberate about only adding msys64 to the path where absolutely necessary.
        ${{ (runner.os == 'Windows' && '$env:PATH=("C:\msys64\mingw64\bin;{0}" -f $env:PATH)') || '' }}
        cabal test all -j1

    - name: Run tests
      if: github.event.inputs.tests != 'all'
      env:
        TMPDIR: ${{ runner.temp }}
        TMP: ${{ runner.temp }}
        KEEP_WORKSPACE: 1
      run: |
        # The tests call out to msys2 commands. We generally do not want to mix toolchains, so
        # we are very deliberate about only adding msys64 to the path where absolutely necessary.
        ${{ (runner.os == 'Windows' && '$env:PATH=("C:\msys64\mingw64\bin;{0}" -f $env:PATH)') || '' }}
        cabal test cardano-testnet cardano-api cardano-node cardano-node-chairman cardano-cli cardano-submit-api

    - name: "Tar artifacts"
      shell: bash
      run: |
        mkdir -p artifacts

        for exe in $(cat dist-newstyle/cache/plan.json | jq -r '."install-plan"[] | select(.style == "local" and (."component-name" | startswith("exe:"))) | ."bin-file"'); do
          if [ -f $exe ]; then
            echo "Including artifact $exe"

            ( cd artifacts
              tar -C "$(dirname $exe)" -czf "$(basename $exe).tar.gz" "$(basename $exe)"
            )
          else
            echo "Skipping artifact $exe"
          fi
        done

    - name: Save Artifact
      if: matrix.ghc == '8.10.7'
      uses: actions/upload-artifact@v1
      with:
        name: artifacts-${{ matrix.os }}
        path: ./artifacts

    - name: Delete socket files in chairman tests in preparation for uploading artifacts
      if: ${{ always() }}
      shell: bash
      run: |
        if [ -d "${{ runner.temp }}/chairman" ]; then
          find "${{ runner.temp }}/chairman" -type s -exec rm -f {} \;
        fi

    - uses: actions/upload-artifact@v2
      if: ${{ always() }}
      continue-on-error: true
      with:
        name: chairman-test-artifacts-${{ matrix.os }}-${{ matrix.n }}-${{ matrix.ghc }}
        path: ${{ runner.temp }}/chairman/

    # Uncomment the following back in for debugging. Remember to launch a `pwsh` from
    # the tmux session to debug `pwsh` issues. And be reminded that the `/msys2` and
    # `/msys2/mingw64` paths are not in PATH by default for the workflow, but tmate
    # will put them in.
    # You may also want to run
    #
    #   $env:PATH=("C:\Program Files\PowerShell\7;{0}" -f $env:ORIGINAL_PATH)
    #
    # to restore the original path.  Do note that some test might need msys2
    # and will silently fail if msys2 is not in path. See the "Run tests" step.
    #
    # - name: Setup tmate session
    #   if: ${{ failure() }}
    #   uses: mxschmitt/action-tmate@v3
    #   with:
    #     limit-access-to-actor: true

  release:
    needs: [build]
    if: ${{ startsWith(github.ref, 'refs/tags') }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2.3.4

    - name: Create Release Tag
      id: create_release_tag
      run: ｜
        echo "TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: true
        prerelease: false

    - name: Download Artifact
      uses: actions/download-artifact@v1
      with:
        name: artifacts-ubuntu-latest

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts-ubuntu-latest/cardano-submit-api.tar.gz
        asset_name: cardano-submit-api_${{ steps.create_release_tag.outputs.TAG }}-linux.tar.gz
        asset_content_type: application/gzip
