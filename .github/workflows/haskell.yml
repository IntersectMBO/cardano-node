name: Haskell CI

on: [push]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        ghc: ["8.6.5"]
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v1

    - name: Select build directory
      run: echo "CABAL_BUILDDIR=dist" >> $GITHUB_ENV

    - name: Install pkgconfiglite
      if: matrix.os == 'windows-latest'
      run: choco install -y pkgconfiglite

    - name: Install libsodium
      if: matrix.os == 'windows-latest'
      run: |
        curl -Ls https://download.libsodium.org/libsodium/releases/libsodium-1.0.18-mingw.tar.gz -o libsodium-1.0.18-mingw.tar.gz
        tar zxvf libsodium-1.0.18-mingw.tar.gz

        sed -i "s|/d/a/1/s/|D:/a/cardano-node/cardano-node/|g" libsodium-win64/lib/pkgconfig/libsodium.pc

        export PKG_CONFIG_PATH="$(readlink -f libsodium-win64/lib/pkgconfig)"
        echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH" >> $GITHUB_ENV

        export LIBSODIUM_PATH="$(readlink -f libsodium-win64/bin | sed 's|^/d|D:|g' | tr / '\\')"
        echo "LIBSODIUM_PATH=$LIBSODIUM_PATH"
        echo "$LIBSODIUM_PATH" >> $GITHUB_PATH

    - name: Install libsodium
      if: matrix.os == 'macos-latest'
      run: brew install libsodium

    - name: Configure to use libsodium
      run: |
        cat >> cabal.project <<EOF
        package cardano-crypto-praos
          flags: -external-libsodium-vrf
        EOF

    - uses: actions/setup-haskell@v1
      id: setup-haskell
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: '3.2.0.0'

    - name: Install build environment
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get -y install libsodium23 libsodium-dev
        sudo apt-get -y install libsystemd0 libsystemd-dev
        sudo apt-get -y remove --purge software-properties-common
        sudo apt-get -y autoremove

    - name: Cabal update
      run: cabal update

    - name: Cabal Configure
      run: cabal configure --builddir="$CABAL_BUILDDIR" --enable-tests --enable-benchmarks --write-ghc-environment-files=always

    - name: Restore cabal cache
      uses: haskell-works/cabal-cache-action@v1
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        BINARY_CACHE_REGION: ${{ secrets.BINARY_CACHE_REGION }}
        BINARY_CACHE_THREADS: ${{ secrets.BINARY_CACHE_THREADS }}
        BINARY_CACHE_URI: ${{ secrets.BINARY_CACHE_URI }}
      with:
        args: |
          sync-from-archive \
            --threads       "$BINARY_CACHE_THREADS" \
            --archive-uri   "$BINARY_CACHE_URI" \
            --region        "$BINARY_CACHE_REGION" \
            --build-path    "$CABAL_BUILDDIR" \
            --store-path    "${{ steps.setup-haskell.outputs.cabal-store }}"

    - name: Install dependencies
      run: cabal build all --builddir="$CABAL_BUILDDIR" --only-dependencies

    - name: Build
      run: cabal build cardano-node cardano-cli cardano-node-chairman --builddir="$CABAL_BUILDDIR"

    - name: Git clone
      run: git clone https://github.com/input-output-hk/cardano-mainnet-mirror

    - name: Run tests
      run: cabal test --builddir="$CABAL_BUILDDIR" cardano-node-chairman

    - name: Save cabal cache
      if: ${{ always() }}
      uses: haskell-works/cabal-cache-action@v1
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        BINARY_CACHE_REGION: ${{ secrets.BINARY_CACHE_REGION }}
        BINARY_CACHE_THREADS: ${{ secrets.BINARY_CACHE_THREADS }}
        BINARY_CACHE_URI: ${{ secrets.BINARY_CACHE_URI }}
      with:
        args: |
          sync-to-archive \
            --threads       "$BINARY_CACHE_THREADS" \
            --archive-uri   "$BINARY_CACHE_URI" \
            --region        "$BINARY_CACHE_REGION" \
            --build-path    "$CABAL_BUILDDIR" \
            --store-path    "${{ steps.setup-haskell.outputs.cabal-store }}"
