name: Haskell CI

on:
  push:
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason'
        required: false
        default: manual
      tests:
        description: 'Tests'
        required: false
        default: 'some'
        options:
        - some
        - all
  create:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        ghc: ["8.10.7"]
        os: [windows-latest]

    env:
      # current ref from: 27.02.2022
      SECP256K1_REF: ac83be33d0956faf6b7f61a60ab524ef7d6a473a

    steps:

    - name: (WIN) Setup MSYS2 and libraries
      if: matrix.os == 'windows-latest'
      uses: msys2/setup-msys2@v2
      with:
        update: true
        install: >-
          base-devel
          autoconf-wrapper
          autoconf
          automake
          libtool
          make
          git
          mingw-w64-x86_64-toolchain
          mingw-w64-x86_64-libsodium
          mingw-w64-x86_64-lmdb
          mingw-w64-x86_64-cmake

    - name: (WIN) Build and install libsecp256k1
      if: matrix.os == 'windows-latest'
      shell: msys2 {0}
      run: |
        git clone https://github.com/bitcoin-core/secp256k1
        ( cd secp256k1
          git switch $SECP256K1_REF --detach
          ./autogen.sh
          ./configure
          make
          make install
        )
        rm -rf secp256k1


    - name: (WIN) Setup Haskell
      if: matrix.os == 'windows-latest'
      shell: msys2 {0}
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://get-ghcup.haskell.org | \
          BOOTSTRAP_HASKELL_NONINTERACTIVE=1 \
          BOOTSTRAP_HASKELL_ADJUST_CABAL_CONFIG=1 \
          BOOTSTRAP_HASKELL_GHC_VERSION="${{ matrix.ghc }}" \
          BOOTSTRAP_HASKELL_CABAL_VERSION="3.6.2.0" \
          sh
        source /c/ghcup/env
        ghc --version
        cabal --version

    - uses: actions/checkout@v2

    - name: Path
      if: matrix.os == 'windows-latest'
      shell: msys2 {0}
      run: |
        echo "PATH: $PATH"
        echo "APPDATA: $APPDATA"
        cat /c/cabal/config

    - name: List all pkg-config packages
      if: matrix.os == 'windows-latest'
      shell: msys2 {0}
      run: |
        echo "=== Package list ==="
        pkg-config --list-all

        echo "=== Package details ==="
        for x in $(pkg-config --list-all | cut -d ' ' -f 1); do
          echo "# $x"
          pkg-config "$x" --cflags --libs
        done

    - name: Haskell versions
      run: |
        ghc --version
        cabal --version

    - name: Cabal update
      run: retry 2 cabal update

    - name: Configure build
      run: |
        if [ "${{github.event.inputs.tests}}" == "all" ]; then
          echo "Reconfigure cabal projects to run tests for all dependencies"
          cat cabal.project | sed 's|tests: False|tests: True|g' > cabal.project.new
          mv cabal.project.new cabal.project
        fi

        cp .github/workflows/cabal.project.local.$RUNNER_OS cabal.project.local

        echo "# cabal.project.local"
        cat cabal.project.local


    - name: (WIN) Extra dirs
      if: matrix.os == 'windows-latest'
      shell: msys2 {0}
      run: |
        cat >> cabal.project.local <<EOF
        package lmdb
          extra-include-dirs: D:\a\_temp\mingw64\include
          extra-lib-dirs:     D:\a\_temp\mingw64\lib
        EOF
        cat ./cabal.project.local

    - name: Record dependencies
      run: |
        cabal build all --dry-run
        cat ${{ env.PLAN_JSON }} | jq -r '."install-plan"[].id' | sort | uniq > dependencies.txt
        date > date.txt

    - name: Build
      run: cabal build cardano-node cardano-cli cardano-node-chairman cardano-submit-api

    - name: Run tests
      run: |
        if [ "${{github.event.inputs.tests}}" == "all" ]; then
          TMPDIR="${{ runner.temp }}" TMP="${{ runner.temp }}" KEEP_WORKSPACE=1 cabal test all
        fi

    - name: "Run tests"
      run: |
        if [ "${{github.event.inputs.tests}}" != "all" ]; then
          TMPDIR="${{ runner.temp }}" TMP="${{ runner.temp }}" KEEP_WORKSPACE=1 cabal test \
            cardano-testnet \
            cardano-api \
            cardano-node \
            cardano-node-chairman \
            cardano-cli \
            cardano-submit-api
        fi

    # - name: Build & Test
    #   run: |
    #     mkdir -p artifacts

    #     for exe in $(cat dist-newstyle/cache/plan.json | jq -r '."install-plan"[] | select(.style == "local" and (."component-name" | startswith("exe:"))) | ."bin-file"'); do
    #       if [ -f $exe ]; then
    #         echo "Including artifact $exe"

    #         ( cd artifacts
    #           tar -C "$(dirname $exe)" -czf "$(basename $exe).tar.gz" "$(basename $exe)"
    #         )
    #       else
    #         echo "Skipping artifact $exe"
    #       fi
    #     done

  #   - name: Save Artifact
  #     if: matrix.ghc == '8.10.7'
  #     uses: actions/upload-artifact@v1
  #     with:
  #       name: artifacts-${{ matrix.os }}
  #       path: ./artifacts

  #   - name: Delete socket files in preparation for upload artifacts
  #     if: ${{ always() }}
  #     run: |
  #       if [ -d "${{ runner.temp }}/chairman" ]; then
  #         find "${{ runner.temp }}/chairman" -type s -exec rm -f {} \;
  #       fi

  #   - uses: actions/upload-artifact@v2
  #     if: ${{ always() }}
  #     continue-on-error: true
  #     with:
  #       name: chairman-test-artifacts-${{ matrix.os }}-${{ matrix.ghc }}
  #       path: ${{ runner.temp }}/chairman/

  # release:
  #   needs: [build]
  #   if: ${{ startsWith(github.ref, 'refs/tags') }}
  #   runs-on: ubuntu-latest
  #   steps:
  #   - name: Checkout code
  #     uses: actions/checkout@v2.3.4

  #   - name: Create Release Tag
  #     id: create_release_tag
  #     run: echo ::set-output name=TAG::${GITHUB_REF/refs\/tags\//}

  #   - name: Create Release
  #     id: create_release
  #     uses: actions/create-release@v1
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       tag_name: ${{ github.ref }}
  #       release_name: Release ${{ github.ref }}
  #       draft: true
  #       prerelease: false

  #   - name: Download Artifact (nux)
  #     uses: actions/download-artifact@v1
  #     with:
  #       name: artifacts-ubuntu-latest

  #   - name: Download Artifact (macOS)
  #     uses: actions/download-artifact@v1
  #     with:
  #       name: artifacts-macOS-latest

  #   - name: Upload Release Asset (cardano-submit-api, linux)
  #     uses: actions/upload-release-asset@v1
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       upload_url: ${{ steps.create_release.outputs.upload_url }}
  #       asset_path: ./artifacts-ubuntu-latest/cardano-submit-api.tar.gz
  #       asset_name: cardano-submit-api_${{ steps.create_release_tag.outputs.TAG }}-linux.tar.gz
  #       asset_content_type: application/gzip

  #   - name: Upload Release Asset (cardano-submit-api, macOS)
  #     uses: actions/upload-release-asset@v1
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #     with:
  #       upload_url: ${{ steps.create_release.outputs.upload_url }}
  #       asset_path: ./artifacts-macOS-latest/cardano-submit-api.tar.gz
  #       asset_name: cardano-submit-api_${{ steps.create_release_tag.outputs.TAG }}-macOS.tar.gz
  #       asset_content_type: application/gzip
