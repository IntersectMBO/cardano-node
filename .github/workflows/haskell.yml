name: Haskell CI

on:
  push:
  workflow_dispatch:
    inputs:
      reason:
        description: 'Reason'
        required: false
        default: manual
      tests:
        description: 'Tests'
        required: false
        default: some
  create:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: bash

    strategy:
      fail-fast: false
      matrix:
        ghc: ["8.10.7"]
        os: [ubuntu-latest, macos-latest, windows-latest]

    env:
      # current ref from: 27.02.2022
      SECP256K1_REF: ac83be33d0956faf6b7f61a60ab524ef7d6a473a

    steps:

    - name: Get path to bash
      # This is necessary to invoke bash from Haskell in Windows, for example in tests.
      # We invoke bash from Haskell in order to test bash scripts in CI to ensure they
      # don't break.
      if: matrix.os == 'windows-latest'
      run: |
        echo "BASH_PATH=$(cd $(dirname $(which bash)); pwd -W)/bash.exe" >> $GITHUB_ENV

    - uses: haskell/actions/setup@v1
      id: setup-haskell
      with:
        ghc-version: ${{ matrix.ghc }}
        cabal-version: 3.6.2.0

    - name: Set cache version
      run: echo "CACHE_VERSION=grFfw8r" >> $GITHUB_ENV

    - uses: actions/checkout@v2

    - name: Add build script path
      run: echo "$(pwd)/.github/bin" >> $GITHUB_PATH

    - name: Install pkgconfiglite (Windows)
      if: matrix.os == 'windows-latest'
      run: retry 2 choco install -y pkgconfiglite

    - name: Install libsodium (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        curl -Ls \
          --connect-timeout 5 \
          --max-time 10 \
          --retry 5 \
          --retry-delay 0 \
          --retry-max-time 40 \
          https://download.libsodium.org/libsodium/releases/libsodium-1.0.18-mingw.tar.gz -o libsodium-1.0.18-mingw.tar.gz
        tar zxvf libsodium-1.0.18-mingw.tar.gz

        sed -i "s|/d/a/1/s/|D:/a/cardano-node/cardano-node/|g" libsodium-win64/lib/pkgconfig/libsodium.pc

        export PKG_CONFIG_PATH="$PKG_CONFIG_PATH;$(readlink -f libsodium-win64/lib/pkgconfig | sed 's|^/d|D:|g' | tr / '\\')"
        echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH" >> $GITHUB_ENV

        export LIBSODIUM_PATH="$(readlink -f libsodium-win64/bin | sed 's|^/d|D:|g' | tr / '\\')"
        echo "LIBSODIUM_PATH=$LIBSODIUM_PATH"
        echo "$LIBSODIUM_PATH" >> $GITHUB_PATH

        echo "# pkg-config libsodium"
        pkg-config libsodium --cflags --libs

    - name: Install lmdb (Windows)
      if: matrix.os == 'windows-latest'
      env:
        RUNNER_TEMP: ${{ runner.temp }}
      run: |
        echo "RUNNER_TEMP=$RUNNER_TEMP"
        cd "$RUNNER_TEMP"
        RUNNER_TEMP_FWD="$(echo "$RUNNER_TEMP" | sed 's|\\|/|g')"
        curl -Ls \
          --connect-timeout 5 \
          --max-time 10 \
          --retry 5 \
          --retry-delay 0 \
          --retry-max-time 40 \
          https://mirror.msys2.org/mingw/mingw64/mingw-w64-x86_64-lmdb-0.9.29-1-any.pkg.tar.zst -o lmdb-0.9.29.pkg.tar.zst
        tar xvf lmdb-0.9.29.pkg.tar.zst

    - name: Install libsodium (MacOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install libsodium
        brew install lmdb

    - name: Setup Github Scripts
      run: echo "$(pwd)/.github/bin" >> $GITHUB_PATH

    - name: Haskell versions
      run: |
        ghc --version
        cabal --version

    - name: Install build environment
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get -y install libsodium23 libsodium-dev
        sudo apt-get -y install libsystemd0 libsystemd-dev
        sudo apt-get -y install liblmdb-dev
        sudo apt-get -y remove --purge software-properties-common
        sudo apt-get -y autoremove

    - name: Install secp256k1 (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get -y install autoconf automake libtool
        mkdir secp256k1-sources
        cd secp256k1-sources
        git clone https://github.com/bitcoin-core/secp256k1.git
        cd secp256k1
        git reset --hard $SECP256K1_REF
        ./autogen.sh
        ./configure --prefix=/usr --enable-module-schnorrsig --enable-experimental
        make
        make check
        sudo make install
        cd ../..

    - name: Install secp256k1 (MacOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install autoconf automake libtool
        mkdir secp256k1-sources
        cd secp256k1-sources
        git clone https://github.com/bitcoin-core/secp256k1.git
        cd secp256k1
        git reset --hard $SECP256K1_REF
        ./autogen.sh
        ./configure --enable-module-schnorrsig --enable-experimental
        make
        make check
        make install

    - name: Install secp256k1 (Windows)
      if: matrix.os == 'windows-latest'
      env:
        RUNNER_TEMP: ${{ runner.temp }}
      run: |
        echo "RUNNER_TEMP=$RUNNER_TEMP"
        cd "$RUNNER_TEMP"
        RUNNER_TEMP_FWD="$(echo "$RUNNER_TEMP" | sed 's|\\|/|g')"
        curl -Ls \
          --connect-timeout 5 \
          --max-time 10 \
          --retry 5 \
          --retry-delay 0 \
          --retry-max-time 40 \
          https://hydra.iohk.io/job/Cardano/haskell-nix/windows-secp256k1/latest/download/1 -o secp256k1.zip
        mkdir secp256k1
        cd secp256k1
        unzip ../secp256k1.zip
        cd ..
        export PKG_CONFIG_PATH="$PKG_CONFIG_PATH;$(readlink -f secp256k1/lib/pkgconfig | sed 's|^/d|D:|g' | tr / '\\')"
        echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH"
        echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH" >> $GITHUB_ENV
        export SECP256K1_PATH="$(readlink -f secp256k1/bin | sed 's|^/d|D:|g' | tr / '\\')"
        echo "SECP256K1_PATH=$SECP256K1_PATH"
        echo "$SECP256K1_PATH" >> $GITHUB_PATH

    - name: Install vcpkg (Windows)
      if: matrix.os == 'windows-latest'
      env:
        RUNNER_TEMP: ${{ runner.temp }}
      run: |
        mkdir -p "$RUNNER_TEMP/bin"
        mkdir -p "$RUNNER_TEMP/lib"

        cd "$RUNNER_TEMP/lib"
        git clone https://github.com/Microsoft/vcpkg.git
        vcpkg/bootstrap-vcpkg.bat
        echo "PWD: $(pwd)"
        
        cd "$RUNNER_TEMP/bin"
        ln -s ../lib/vcpkg/vcpkg.exe vcpkg
        echo "PWD: $(pwd)"

        export VCPKG_ROOT="$RUNNER_TEMP/lib/vcpkg"
        echo "VCPKG_ROOT=$VCPKG_ROOT" >> $GITHUB_ENV

        echo "$RUNNER_TEMP/bin" >> $GITHUB_PATH

        echo "# View pc files"
        cd "$RUNNER_TEMP"
        for x in $(find . -name '*.pc'); do
          echo "# $x"
          cat "$x"
        done

    - name: Install openssl (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        vcpkg --triplet x64-mingw-dynamic install openssl
        export PKG_CONFIG_PATH="$PKG_CONFIG_PATH;$(readlink -f "$RUNNER_TEMP/lib/vcpkg/packages/openssl_x64-mingw-dynamic/lib/pkgconfig" | sed 's|^/c|D:|g' | tr / '\\')"
        echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH"
        echo "PKG_CONFIG_PATH=$PKG_CONFIG_PATH" >> $GITHUB_ENV

        # Not sure why this the pc file points to a lib64 instead of lib where the files are.
        (cd "$RUNNER_TEMP/lib/vcpkg/packages/openssl_x64-mingw-dynamic"; ln -s lib lib64)

        export OPENSSL_PATH="$RUNNER_TEMP/lib/vcpkg/packages/openssl_x64-mingw-dynamic/bin"
        echo "OPENSSL_PATH=$OPENSSL_PATH"
        echo "$OPENSSL_PATH" >> $GITHUB_PATH

        echo "# pkg-config openssl"
        pkg-config openssl --cflags --libs

    - name: Path
      run:  echo "$PATH"

    - name: Find asn1.h file
      if: matrix.os == 'windows-latest'
      env:
        RUNNER_TEMP: ${{ runner.temp }}
      run: |
        cd "$RUNNER_TEMP/lib"

        echo "Finding asn1.h file"
        find . -name 'asn1.h'

        echo "Finding *.a files"
        find . -name '*.a'

        echo "Finding *.dll files"
        find . -name '*.dll'

    - name: List all pkg-config packages
      if: matrix.os == 'windows-latest'
      run: |
        echo "=== Package list ==="
        pkg-config --list-all
        
        echo "=== Package details ==="
        for x in $(pkg-config --list-all | cut -d ' ' -f 1); do
          echo "# $x"
          pkg-config "$x" --cflags --libs
        done

    - name: Cabal update
      run: retry 2 cabal update

    - name: Configure build
      run: |
        if [ "${{github.event.inputs.tests}}" == "all" ]; then
          echo "Reconfigure cabal projects to run tests for all dependencies"
          cat cabal.project | sed 's|tests: False|tests: True|g' > cabal.project.new
          mv cabal.project.new cabal.project
        fi

        cp .github/workflows/cabal.project.local.$RUNNER_OS cabal.project.local

        echo "# cabal.project.local"
        cat cabal.project.local


    - name: Extra dirs (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        cat >> cabal.project.local <<EOF
        package lmdb
          extra-include-dirs: D:\a\_temp\mingw64\include
          extra-lib-dirs:     D:\a\_temp\mingw64\lib
                              D:\a\_temp\mingw64\bin
        EOF
        cat ./cabal.project.local

        # For some reason, cabal test cardano-cli will silently fail without any
        # message unless the library is accessible, and it seems like the above isn't enough.
        cp /d/a/_temp/mingw64/bin/liblmdb.dll ./cardano-cli
        cp /d/a/_temp/mingw64/bin/liblmdb.dll ./cardano-testnet
        cp /d/a/_temp/mingw64/bin/liblmdb.dll ./cardano-node-chairman

    - name: Record dependencies
      run: |
        cabal build all --dry-run
        cat ${{ env.PLAN_JSON }} | jq -r '."install-plan"[].id' | sort | uniq > dependencies.txt
        date > date.txt

    - uses: actions/cache@v2
      name: Cache cabal store
      with:
        path: ${{ steps.setup-haskell.outputs.cabal-store }}
        key: cache-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('dependencies.txt') }}-${{ hashFiles('date.txt') }}
        restore-keys: |
          cache-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('dependencies.txt') }}-${{ hashFiles('date.txt') }}
          cache-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.ghc }}-${{ hashFiles('dependencies.txt') }}
          cache-${{ env.CACHE_VERSION }}-${{ runner.os }}-${{ matrix.ghc }}

    - name: Build
      run: cabal build cardano-node cardano-cli cardano-node-chairman cardano-submit-api

    - name: Run tests
      run: |
        if [ "${{github.event.inputs.tests}}" == "all" ]; then
          TMPDIR="${{ runner.temp }}" TMP="${{ runner.temp }}" KEEP_WORKSPACE=1 cabal test all
        fi

    - name: "Run tests"
      run: |
        if [ "${{github.event.inputs.tests}}" != "all" ]; then
          TMPDIR="${{ runner.temp }}" TMP="${{ runner.temp }}" KEEP_WORKSPACE=1 cabal test \
            cardano-testnet \
            cardano-api \
            cardano-node \
            cardano-node-chairman \
            cardano-cli \
            cardano-submit-api
        fi

    - name: Build & Test
      run: |
        mkdir -p artifacts

        for exe in $(cat dist-newstyle/cache/plan.json | jq -r '."install-plan"[] | select(.style == "local" and (."component-name" | startswith("exe:"))) | ."bin-file"'); do
          if [ -f $exe ]; then
            echo "Including artifact $exe"

            ( cd artifacts
              tar -C "$(dirname $exe)" -czf "$(basename $exe).tar.gz" "$(basename $exe)"
            )
          else
            echo "Skipping artifact $exe"
          fi
        done

    - name: Save Artifact
      if: matrix.ghc == '8.10.7'
      uses: actions/upload-artifact@v1
      with:
        name: artifacts-${{ matrix.os }}
        path: ./artifacts

    - name: Delete socket files in preparation for upload artifacts
      if: ${{ always() }}
      run: |
        if [ -d "${{ runner.temp }}/chairman" ]; then
          find "${{ runner.temp }}/chairman" -type s -exec rm -f {} \;
        fi

    - uses: actions/upload-artifact@v2
      if: ${{ always() }}
      continue-on-error: true
      with:
        name: chairman-test-artifacts-${{ matrix.os }}-${{ matrix.ghc }}
        path: ${{ runner.temp }}/chairman/

  release:
    needs: [build]
    if: ${{ startsWith(github.ref, 'refs/tags') }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2.3.4

    - name: Create Release Tag
      id: create_release_tag
      run: echo ::set-output name=TAG::${GITHUB_REF/refs\/tags\//}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: true
        prerelease: false

    - name: Download Artifact (linux)
      uses: actions/download-artifact@v1
      with:
        name: artifacts-ubuntu-latest

    - name: Download Artifact (macOS)
      uses: actions/download-artifact@v1
      with:
        name: artifacts-macOS-latest

    - name: Upload Release Asset (cardano-submit-api, linux)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts-ubuntu-latest/cardano-submit-api.tar.gz
        asset_name: cardano-submit-api_${{ steps.create_release_tag.outputs.TAG }}-linux.tar.gz
        asset_content_type: application/gzip

    - name: Upload Release Asset (cardano-submit-api, macOS)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts-macOS-latest/cardano-submit-api.tar.gz
        asset_name: cardano-submit-api_${{ steps.create_release_tag.outputs.TAG }}-macOS.tar.gz
        asset_content_type: application/gzip
