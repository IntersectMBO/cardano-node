name: Haskell CI

on:
  push:
  workflow_dispatch:
    inputs:
      tests:
        description: 'Tests'
        required: false
        default: 'some'
        options:
        - some
        - all
  create:

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        # Add more elements to this list to run multiple instances of the build in CI.  Increasing the
        # number instances is a good way to trigger flaky build failures
        n: [1]

        ghc: ["8.10.7"]
        os: [ubuntu-latest, macos-latest, windows-latest]

    env:
      # current ref from: 27.02.2022
      SECP256K1_REF: ac83be33d0956faf6b7f61a60ab524ef7d6a473a
      # OpenSSL is installed in a non-standard location in MacOS. See
      # https://github.com/actions/virtual-environments/blob/main/images/macos/macos-11-Readme.md
      PKG_CONFIG_PATH: ${{ (matrix.os == 'macos-latest' && '/usr/lib/pkgconfig:/usr/local/opt/openssl@1.1/lib/pkgconfig') || (matrix.os == 'ubuntu-latest' && '/usr/lib/pkgconfig:/usr/local/lib/pkgconfig') || '' }}
      
      # we need the LD_LIBRARY_PATH env var here because we ended up installing libsecp256k1 into /usr/local,
      # pkg-config, *does* return the proper location, but the library does not appear to be properly referenced.
      # FIXME: this is arguably a bug, and pkg-config should return the right values!
      LD_LIBRARY_PATH: ${{ (matrix.os != 'windows-latest' && '/usr/local/lib') || '' }}

    steps:
    - name: "WIN: Install System Dependencies via pacman (msys2)"
      if: runner.os == 'Windows'
      run: |
         # ghcup should be installed on current GHA Windows runners. Let's use ghcup to run
         # pacman, to install the necessary dependencies, ...
         ghcup run -- pacman --noconfirm -S `
            mingw-w64-x86_64-pkg-config `
            mingw-w64-x86_64-libsodium `
            mingw-w64-x86_64-openssl `
            base-devel `
            autoconf-wrapper `
            autoconf `
            automake `
            libtool `
            make

     # this seems to break something. It _must_ come after the pacman setup
     # above. It appears as if PATHEXT is set _after_ ghcup install ghc/cabal, and
     # as such we'd need pacman.exe instead.
    - name: Setup Haskell
      run: |
        # Use GHCUP to manage ghc/cabal
        ghcup install ghc --set ${{ matrix.ghc }}
        ghcup install cabal --set 3.8.1.0

        ghc --version
        cabal --version

    - name: "WIN: fixup cabal config"
      if: runner.os == 'Windows'        
      run: |
        # make sure cabal knows about msys64, and mingw64 tools. Not clear why C:/cabal/config is empty
        # and C:/cabal doesn't even exist.  The ghcup bootstrap file should have create it in the image:
        # See https://github.com/haskell/ghcup-hs/blob/787edc17af4907dbc51c85e25c490edd8d68b80b/scripts/bootstrap/bootstrap-haskell#L591
        # So we'll do it by hand here for now.
        #
        # We'll _not_ add extra-include-dirs, or extra-lib-dirs, and rely on what's shipped with GHC.
        # https://github.com/msys2/MINGW-packages/issues/10837#issuecomment-1047105402
        # https://gitlab.haskell.org/ghc/ghc/-/issues/21111
        # if we _do_ want them, this would be the lines to add below

        $ghcMingwDir = Join-Path -Path $(ghc --print-libdir) `
                                 -ChildPath ../mingw/x86_64-*-mingw32/lib/ `
                                 -Resolve

        cabal user-config -a "extra-prog-path: C:/msys64/mingw64/bin, C:/msys64/usr/bin" `
                          -a "extra-include-dirs: C:/msys64/mingw64/include" `
                          -a ("extra-lib-dirs: {0}, C:/msys64/mingw64/lib" -f $ghcMingwDir) `
                          -f init

    - name: "Setup cabal-store"
      id: cabal-store
      shell: bash
      run: |
        cabal help user-config
        cabal_config_file="$(cabal help user-config | grep -A 1 'You can edit the cabal configuration file to set defaults' | tail -n 1 | xargs)"

        if [[ '${{ runner.os }}' != 'Windows' ]]; then
          echo "cabal-store=$(dirname "$cabal_config_file")/store" | tee -a "$GITHUB_OUTPUT"
        else
          echo "cabal-store=C:\\cabal\\store" | tee -a "$GITHUB_OUTPUT"
        fi

    - uses: actions/checkout@v2

    - name: "[PowerShell] Add build script path"
      if: runner.os == 'Windows'
      shell: pwsh
      run: Add-Content $env:GITHUB_PATH "$(pwd)/.github/bin"

    - name: "[Bash] Add build script path"
      if: runner.os != 'Windows'
      run: echo "$(pwd)/.github/bin" >> $GITHUB_PATH

    - name: "LINUX: Install build environment (apt-get)"
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get -y install libsodium23 libsodium-dev
        sudo apt-get -y install libsystemd0 libsystemd-dev
        sudo apt-get -y remove --purge software-properties-common
        sudo apt-get -y autoremove

    - name: "LINUX: Install build environment (for secp256k1)"
      if: runner.os == 'Linux'
      run: sudo apt-get -y install autoconf automake libtool

    - name: "MAC: Install build environment (brew)"
      if: runner.os == 'macOS'
      run: |
        brew install libsodium

    - name: "MAC: Install build environment (for secp256k1)"
      if: runner.os == 'macOS'
      run: brew install autoconf automake libtool

    - name: "LINUX: Install secp256k1"
      if: runner.os != 'Windows'
      shell: bash
      env:
        CI_SECP_FLAGS: "--prefix=/usr/local"
        CI_SECP_INSTALL_CMD: sudo
      run: bash .github/workflows/build-secp256k1.bash

    # TODO: this really should come from a pre-built location
    - name: "WIN: Install secp256k1"
      if: runner.os == 'Windows'
      # Same env as tmate action
      env:
        MSYS2_PATH_TYPE: inherit
        MSYSTEM: MINGW64
        CHERE_INVOKING: 1
        # install secp into /mingw64 prefix, which is where pkg-config will look
        # by default.
        CI_SECP_FLAGS: "--prefix=/mingw64"
      run: C:\\msys64\\usr\\bin\\bash.exe .github/workflows/build-secp256k1.bash

    - name: Cabal update
      run: cabal update

    - name: Configure build
      shell: bash
      run: |
        if [ "${{github.event.inputs.tests}}" == "all" ]; then
          echo "Reconfigure cabal projects to run tests for all dependencies"
          sed -i 's|tests: False|tests: True|g' cabal.project
        fi

        cp ".github/workflows/cabal.project.local.ci.$(uname -s)" cabal.project.local

        echo "# cabal.project.local"
        cat cabal.project.local

    - name: List all pkg-config packages
      run: |
        # The tests call out to msys2 commands. We generally do not want to mix toolchains, so
        # we are very deliberate about only adding msys64 to the path where absolutely necessary.
        ${{ (runner.os == 'Windows' && '$env:PATH=("C:\msys64\mingw64\bin;{0}" -f $env:PATH)') || '' }}
        pkg-config --list-all

    - name: Build dry run
      run: |
        # The tests call out to msys2 commands. We generally do not want to mix toolchains, so
        # we are very deliberate about only adding msys64 to the path where absolutely necessary.
        ${{ (runner.os == 'Windows' && '$env:PATH=("C:\msys64\mingw64\bin;{0}" -f $env:PATH)') || '' }}
        cabal build all --dry-run

    - name: Cabal cache over S3
      uses: action-works/cabal-cache-s3@v1
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      with:
        region: us-west-2
        dist-dir: dist-newstyle
        store-path: ${{ steps.cabal-store.outputs.cabal-store }}
        threads: 16
        archive-uri: ${{ secrets.BINARY_CACHE_URI }}
        skip: "${{ secrets.BINARY_CACHE_URI == '' }}"

    - name: Cabal cache over HTTPS
      uses: action-works/cabal-cache-s3@v1
      with:
        dist-dir: dist-newstyle
        store-path: ${{ steps.cabal-store.outputs.cabal-store }}
        threads: 16
        archive-uri: https://iohk.cache.haskellworks.io
        skip: "${{ secrets.BINARY_CACHE_URI != '' }}"
        enable-save: false

    - name: Build
      run: |
        # The tests call out to msys2 commands. We generally do not want to mix toolchains, so
        # we are very deliberate about only adding msys64 to the path where absolutely necessary.
        ${{ (runner.os == 'Windows' && '$env:PATH=("C:\msys64\mingw64\bin;{0}" -f $env:PATH)') || '' }}
        cabal build cardano-node cardano-cli cardano-node-chairman cardano-submit-api

    - name: Run tests (all)
      if: github.event.inputs.tests == 'all'
      env:
        TMPDIR: ${{ runner.temp }}
        TMP: ${{ runner.temp }}
        KEEP_WORKSPACE: 1
      run: |
        # The tests call out to msys2 commands. We generally do not want to mix toolchains, so
        # we are very deliberate about only adding msys64 to the path where absolutely necessary.
        ${{ (runner.os == 'Windows' && '$env:PATH=("C:\msys64\mingw64\bin;{0}" -f $env:PATH)') || '' }}
        cabal test all

    - name: Run tests
      if: github.event.inputs.tests != 'all'
      env:
        TMPDIR: ${{ runner.temp }}
        TMP: ${{ runner.temp }}
        KEEP_WORKSPACE: 1
      run: |
        # The tests call out to msys2 commands. We generally do not want to mix toolchains, so
        # we are very deliberate about only adding msys64 to the path where absolutely necessary.
        ${{ (runner.os == 'Windows' && '$env:PATH=("C:\msys64\mingw64\bin;{0}" -f $env:PATH)') || '' }}
        cabal test cardano-testnet cardano-api cardano-node cardano-node-chairman cardano-cli cardano-submit-api

    - name: "Tar artifacts"
      shell: bash
      run: |
        mkdir -p artifacts

        for exe in $(cat dist-newstyle/cache/plan.json | jq -r '."install-plan"[] | select(.style == "local" and (."component-name" | startswith("exe:"))) | ."bin-file"'); do
          if [ -f $exe ]; then
            echo "Including artifact $exe"

            ( cd artifacts
              tar -C "$(dirname $exe)" -czf "$(basename $exe).tar.gz" "$(basename $exe)"
            )
          else
            echo "Skipping artifact $exe"
          fi
        done

    - name: Save Artifact
      if: matrix.ghc == '8.10.7'
      uses: actions/upload-artifact@v1
      with:
        name: artifacts-${{ matrix.os }}
        path: ./artifacts

    - name: Delete socket files in chairman tests in preparation for uploading artifacts
      if: ${{ always() }}
      shell: bash
      run: |
        if [ -d "${{ runner.temp }}/chairman" ]; then
          find "${{ runner.temp }}/chairman" -type s -exec rm -f {} \;
        fi

    - uses: actions/upload-artifact@v2
      if: ${{ always() }}
      continue-on-error: true
      with:
        name: chairman-test-artifacts-${{ matrix.os }}-${{ matrix.n }}-${{ matrix.ghc }}
        path: ${{ runner.temp }}/chairman/

    # Uncomment the following back in for debugging. Remember to launch a `pwsh` from
    # the tmux session to debug `pwsh` issues. And be reminded that the `/msys2` and
    # `/msys2/mingw64` paths are not in PATH by default for the workflow, but tmate
    # will put them in.
    # You may also want to run
    #
    #   $env:PATH=("C:\Program Files\PowerShell\7;{0}" -f $env:ORIGINAL_PATH)
    #
    # to restore the original path.  Do note that some test might need msys2
    # and will silently fail if msys2 is not in path. See the "Run tests" step.
    #
    # - name: Setup tmate session
    #   if: ${{ failure() }}
    #   uses: mxschmitt/action-tmate@v3
    #   with:
    #     limit-access-to-actor: true

  release:
    needs: [build]
    if: ${{ startsWith(github.ref, 'refs/tags') }}
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2.3.4

    - name: Create Release Tag
      id: create_release_tag
      run: ｜
        echo "TAG=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_OUTPUT

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: true
        prerelease: false

    - name: Download Artifact
      uses: actions/download-artifact@v1
      with:
        name: artifacts-ubuntu-latest

    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./artifacts-ubuntu-latest/cardano-submit-api.tar.gz
        asset_name: cardano-submit-api_${{ steps.create_release_tag.outputs.TAG }}-linux.tar.gz
        asset_content_type: application/gzip
