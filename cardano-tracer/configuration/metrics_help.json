{
  "Forge.DelegMapSize": "Delegation map size",
  "Forge.UtxoSize": "UTxO set size",
  "Forge.forged": "Counter of forged blocks",
  "Mem.resident": "Kernel-reported RSS (resident set size)",
  "RTS.alloc": "RTS-reported bytes allocated",
  "RTS.gcHeapBytes": "RTS-reported heap bytes",
  "RTS.gcLiveBytes": "RTS-reported live bytes",
  "RTS.gcMajorNum": "Major GCs",
  "RTS.gcMinorNum": "Minor GCs",
  "RTS.gcticks": "RTS-reported CPU ticks spent on GC",
  "RTS.mutticks": "RTS-reported CPU ticks spent on mutator",
  "RTS.threads": "RTS green thread count",
  "Stat.cputicks": "Kernel-reported CPU ticks (1/100th of a second), since process start",
  "Stat.fsRd": "FS bytes read",
  "Stat.fsWr": "FS bytes written",
  "Stat.netRd": "IP packet bytes read",
  "Stat.netWr": "IP packet bytes written",
  "blockNum": "Number of blocks in this chain fragment.",
  "blockReplayProgress": "Progress in percent",
  "blockfetchclient.blockdelay": "delay (s) of the latest block fetch",
  "blockfetchclient.blockdelay.cdfFive": "probability for block fetch to complete within 5s",
  "blockfetchclient.blockdelay.cdfOne": "probability for block fetch to complete within 1s",
  "blockfetchclient.blockdelay.cdfThree": "probability for block fetch to complete within 3s",
  "blockfetchclient.blocksize": "block size (bytes) of the latest block fetch",
  "blockfetchclient.lateblocks": "number of block fetches that took longer than 5s",
  "blocksForged": "How many blocks did this node forge?",
  "cardano_build_info": "Cardano node build info",
  "cardano_version_major": "Cardano node version information",
  "cardano_version_minor": "Cardano node version information",
  "cardano_version_patch": "Cardano node version information",
  "connectedPeers": "Number of connected peers",
  "density": "The actual number of blocks created over the maximum expected number of blocks that could be created over the span of the last @k@ blocks.",
  "epoch": "In which epoch is the tip of the current chain.",
  "forgedSlotLast": "Slot number of the last forged block",
  "forging_enabled": "A node without forger credentials or started as non-producing has forging disabled.",
  "forks": "counter for forks",
  "haskell_compiler_major": "Cardano compiler version information",
  "haskell_compiler_minor": "Cardano compiler version information",
  "haskell_compiler_patch": "Cardano compiler version information",
  "mempoolBytes": "Byte size of the mempool",
  "node.start.time": "The UTC time this node was started represented in POSIX seconds.",
  "nodeCannotForge": "How many times was this node unable to forge [a block]?",
  "nodeIsLeader": "How many times was this node slot leader?",
  "peerSelection.ActiveBigLedgerPeers": "Number of active big ledger peers",
  "peerSelection.ActiveBigLedgerPeersDemotions": "Number of active big ledger peers demotions",
  "peerSelection.ActiveBootstrapPeers": "Number of active bootstrap peers",
  "peerSelection.ActiveBootstrapPeersDemotions": "Number of active bootstrap peers demotions",
  "peerSelection.ActiveLocalRootPeers": "Number of active local root peers",
  "peerSelection.ActiveLocalRootPeersDemotions": "Number of active local root peers demotions",
  "peerSelection.ActiveNonRootPeers": "Number of active non root peers",
  "peerSelection.ActiveNonRootPeersDemotions": "Number of active non root peers demotions",
  "peerSelection.ActivePeers": "Number of active peers",
  "peerSelection.ActivePeersDemotions": "Number of active peers demotions",
  "peerSelection.Cold": "Number of cold peers",
  "peerSelection.ColdBigLedgerPeers": "Number of cold big ledger peers",
  "peerSelection.ColdBigLedgerPeersPromotions": "Number of cold big ledger peers promotions",
  "peerSelection.ColdBootstrapPeersPromotions": "Number of cold bootstrap peers promotions",
  "peerSelection.ColdNonRootPeersPromotions": "Number of cold non root peers promotions",
  "peerSelection.ColdPeersPromotions": "Number of cold peers promotions",
  "peerSelection.EstablishedBigLedgerPeers": "Number of established big ledger peers",
  "peerSelection.EstablishedBootstrapPeers": "Number of established bootstrap peers",
  "peerSelection.EstablishedLocalRootPeers": "Number of established local root peers",
  "peerSelection.EstablishedNonRootPeers": "Number of established non root peers",
  "peerSelection.EstablishedPeers": "Number of established peers",
  "peerSelection.Hot": "Number of hot peers",
  "peerSelection.HotBigLedgerPeers": "Number of hot big ledger peers",
  "peerSelection.KnownBigLedgerPeers": "Number of known big ledger peers",
  "peerSelection.KnownBootstrapPeers": "Number of known bootstrap peers",
  "peerSelection.KnownLocalRootPeers": "Number of known local root peers",
  "peerSelection.KnownNonRootPeers": "Number of known non root peers",
  "peerSelection.KnownPeers": "Number of known peers",
  "peerSelection.LocalRoots": "Numbers of warm & hot local roots",
  "peerSelection.RootPeers": "Number of root peers",
  "peerSelection.Warm": "Number of warm peers",
  "peerSelection.WarmBigLedgerPeers": "Number of warm big ledger peers",
  "peerSelection.WarmBigLedgerPeersDemotions": "Number of warm big ledger peers demotions",
  "peerSelection.WarmBigLedgerPeersPromotions": "Number of warm big ledger peers promotions",
  "peerSelection.WarmBootstrapPeersDemotions": "Number of warm bootstrap peers demotions",
  "peerSelection.WarmBootstrapPeersPromotions": "Number of warm bootstrap peers promotions",
  "peerSelection.WarmLocalRootPeersPromotions": "Number of warm local root peers promotions",
  "peerSelection.WarmNonRootPeersDemotions": "Number of warm non root peers demotions",
  "peerSelection.WarmNonRootPeersPromotions": "Number of warm non root peers promotions",
  "peerSelection.WarmPeersDemotions": "Number of warm peers demotions",
  "peerSelection.WarmPeersPromotions": "Number of warm peers promotions",
  "peerSelection.churn.DecreasedActiveBigLedgerPeers": "number of decreased active big ledger peers",
  "peerSelection.churn.DecreasedActivePeers": "number of decreased active peers",
  "peerSelection.churn.DecreasedEstablishedBigLedgerPeers": "number of decreased established big ledger peers",
  "peerSelection.churn.DecreasedEstablishedPeers": "number of decreased established peers",
  "peerSelection.churn.DecreasedKnownBigLedgerPeers": "number of decreased known big ledger peers",
  "peerSelection.churn.DecreasedKnownPeers": "number of decreased known peers",
  "peerSelection.churn.IncreasedActiveBigLedgerPeers": "number of increased active big ledger peers",
  "peerSelection.churn.IncreasedActivePeers": "number of increased active peers",
  "peerSelection.churn.IncreasedEstablishedBigLedgerPeers": "number of increased established big ledger peers",
  "peerSelection.churn.IncreasedEstablishedPeers": "number of increased established peers",
  "peerSelection.churn.IncreasedKnownBigLedgerPeers": "number of increased known big ledger peers",
  "peerSelection.churn.IncreasedKnownPeers": "number of increased known peers",
  "served.block": "This counter metric indicates how many blocks this node has served.",
  "served.block.latest": "This counter metric indicates how many chain tip blocks this node has served.",
  "served.header": "A counter triggered only on header event with falling edge",
  "slotInEpoch": "Relative slot number of the tip of the current chain within the epoch..",
  "slotNum": "Number of slots in this chain fragment.",
  "slotsMissed": "How many slots did this node miss?",
  "systemStartTime": "The UTC time this node was started.",
  "tipBlock": "Values for hash, parent hash and issuer verification key hash",
  "txsInMempool": "Transactions in mempool",
  "txsSyncDuration": "Time to sync the mempool in ms after block adoption"
}
