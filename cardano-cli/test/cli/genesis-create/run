#!/bin/sh -u

cwd=$(dirname "$0")

# shellcheck source=/dev/null
. "${cwd}/../core/common"

# shellcheck disable=SC2154
banner "${testname}"

setup_data_dir "${testname}"

OUTPUT_JSON="${TEST_DIR}/genesis.json"

start_time=$(TZ=UTC $DATE --iso-8601=seconds | $SED 's/+.*/Z/')

cp "${DATA_DIR}/genesis.spec.json" "${TEST_DIR}/"

# Random number for the total supply.
supply=$(head -100 /dev/urandom | cksum | $SED 's/ .*//')

# Random number for the number of genesis delegates.
seconds=$($DATE +"%s")
gendlg_count=$(( 4 + seconds % 16))

error=0

# Create the genesis json file and required keys.
${CARDANO_CLI} shelley genesis create \
    --testnet-magic 12 \
    --start-time "${start_time}" \
    --supply "${supply}" \
    --gen-genesis-keys ${gendlg_count} \
    --gen-utxo-keys ${gendlg_count} \
    --genesis-dir "${TEST_DIR}/"
fail_on_error $?

check_supply=$(grep maxLovelaceSupply "${OUTPUT_JSON}" | sed "s/${supply}/correct/;s/[ \"]//g")
if test "${check_supply}" != "maxLovelaceSupply:correct," ; then
    echo "Bad $(grep maxLovelaceSupply "${OUTPUT_JSON}")"
    error=1
    fi

check_start_time=$(grep systemStart "${OUTPUT_JSON}" | sed "s/${start_time}/correct/;s/[ \"]//g")
if test "${check_start_time}" != "systemStart:correct," ; then
    echo "Bad $(grep systemStart "${OUTPUT_JSON}")"
    error=1
    fi

# Uncomment the following line to generate and copy the 'genesis.vkey' data file for the
# 'genesis-key-hash' test.
# cp "${TEST_DIR}/genesis-keys/genesis1.vkey" "test/cli/genesis-key-hash/data/genesis.vkey"

# cat "${OUTPUT_JSON}"
# echo

check_delegate_count=$(jq '.genDelegs' < "${OUTPUT_JSON}" | grep -c ': {')
if test "${check_delegate_count}" != "${gendlg_count}" ; then
    echo "Bad genesis delegate count: ${check_delegate_count}"
    error=1
    fi

# Check that the sum of the initial fund amounts matches the total supply.
check_supply=$(jq '.initialFunds' < "${OUTPUT_JSON}" | grep ':' | sed 's/.*://;s/,//' | paste -sd+ -| bc)
if test "${check_supply}" != "${supply}" ; then
    echo "Bad sum of supply: ${check_supply} != ${supply}"
    error=1
    fi

jq '.genDelegs' < "${OUTPUT_JSON}" | grep ': {' > "${TEST_DIR}/genesis-delegate.pairs"

keyhash_count=$(sed 's/:.*//' < "${TEST_DIR}/genesis-delegate.pairs" | sort | uniq | wc -l | xargs)
if test "${keyhash_count}" != "${gendlg_count}" ; then
    echo "Genesis keyhashes are not unique."
    cat "${TEST_DIR}/genesis-delegate.pairs"
    error=1
    fi

keyhash_delegate_count=$(sort "${TEST_DIR}/genesis-delegate.pairs" | uniq | wc -l | xargs)
if test "${keyhash_delegate_count}" != "${gendlg_count}" ; then
    echo "Genesis delegate keyhashes are not unique (${keyhash_delegate_count} != ${gendlg_count})."
    cat "${TEST_DIR}/genesis-delegate.pairs"
    error=1
    fi

# tree "${TEST_DIR}/"

for i in $(seq 1 $gendlg_count) ; do
    # Check genesis keys:
    assert_file_exists "${TEST_DIR}/genesis-keys/genesis${i}.skey"
    assert_file_exists "${TEST_DIR}/genesis-keys/genesis${i}.vkey"

    assert_string 'Genesis signing key' "${TEST_DIR}/genesis-keys/genesis${i}.skey"
    assert_string 'Genesis verification key' "${TEST_DIR}/genesis-keys/genesis${i}.vkey"

    # Check delegate keys:
    assert_file_exists "${TEST_DIR}/delegate-keys/delegate${i}.skey"
    assert_file_exists "${TEST_DIR}/delegate-keys/delegate${i}.vkey"
    assert_file_exists "${TEST_DIR}/delegate-keys/delegate${i}.counter"

    assert_string 'Node operator signing key' "${TEST_DIR}/delegate-keys/delegate${i}.skey"
    assert_string 'Node operator verification key' "${TEST_DIR}/delegate-keys/delegate${i}.vkey"
    assert_string 'Node operational certificate issue counter' "${TEST_DIR}/delegate-keys/delegate${i}.counter"

    # Check utxo keys:
    assert_file_exists "${TEST_DIR}/utxo-keys/utxo${i}.skey"
    assert_file_exists "${TEST_DIR}/utxo-keys/utxo${i}.vkey"

    assert_string 'Genesis UTxO signing key' "${TEST_DIR}/utxo-keys/utxo${i}.skey"
    assert_string 'Genesis UTxO verification key' "${TEST_DIR}/utxo-keys/utxo${i}.vkey"
    done

report_result ${error}
